<?php

namespace App\Http\Middleware;

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <contact@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

use Closure;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Illuminate\Support\Facades;
use Symfony\Component\HttpFoundation\Response;
use App\Models\Config;
use App\Models\ConfigLang;
use App\Models\Language;
use App\Models\User;
use App\Models\Contact;
use Auth;

class NuraMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle(Request $request, Closure $next): Response
    {

        // if demo mode is enabled, deny all "post", "put" and "delete" methods and redirect to previous page
        if (config('nura.demo_mode')) {
            if ($request->isMethod('put') || $request->isMethod('post') || $request->isMethod('delete'))
                return redirect(route('admin'))->with('error', 'demo');
        }

        // Language
        $lang = $request->segment(1);

        if (strlen($lang) === 2 && Language::where(['code' => $lang, 'status' => 'active'])->exists()) $set_lang = $lang;
        else $set_lang = Language::get_default_language()->code;

        app()->setLocale($set_lang ?? config('app.locale'));
        setlocale(LC_ALL, $set_lang ?? config('app.locale'));

        // Update last activity for logged users
        if (Auth::user()) {
            User::where('id', Auth::user()->id)->update(['last_activity_at' => now()]);
        }

        Facades\View::composer('*', function (View $view) {
            $view->with('languages', Language::get_languages()); // active and inactive
            $view->with('active_languages', Language::get_active_languages()); // active languages
            $view->with('active_language', Language::get_active_language()); // active language
            $view->with('default_language', Language::get_default_language()); // default language
            $view->with('site_text_dir', Language::get_active_language()->dir);

            // general config
            $config = Config::config();
            $view->with('config', $config);

            // config depending on language
            $config_lang = ConfigLang::config();
            $view->with('config_lang', $config_lang);

            // Locale
            $view->with('locale', config('app.locale'));

            // Website Menu links            
            $menu_links = ConfigLang::get_config(Language::get_active_language()->id, 'menu_links');
            if ($menu_links) {
                $menu_links = unserialize($menu_links);
                $menu_links = json_decode(json_encode($menu_links)); // array to object
            }
            $view->with('menu_links', $menu_links ?? array());

            if (Auth::user()) {
                if (Auth::user()->role == 'admin' || Auth::user()->role == 'internal') {
                    // count unread forms messages 
                    $count_unread_contact_messages = Contact::whereNull('read_at')->count();
                    $view->with('count_unread_contact_messages', $count_unread_contact_messages);
                }
            }
        });

        return $next($request);
    }
}
