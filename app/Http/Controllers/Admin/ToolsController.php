<?php

namespace App\Http\Controllers\Admin;

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\Contact;
use App\Models\Page;
use Auth;
use DB;

class ToolsController extends Controller
{

    /**
     * Show the dashboard.
     */
    public function dashboard()
    {
        if (Auth::user()->role == 'admin') $view = 'tools.dashboard';
        if (Auth::user()->role == 'internal') $view = 'tools.dashboard-internal';

        $count_accounts = User::count();
        $count_pages = Page::count();
        $count_contact_messages = Contact::count();
        $count_unread_contact_messages = Contact::whereNull('read_at')->count();

        $last_accounts = User::whereNull('deleted_at')->orderByDesc('id')->limit(10)->get();
        $last_contact_messages = Contact::whereNull('deleted_at')->orderByDesc('id')->limit(10)->get();

        return view('admin.index', [
            'view_file' => $view,
            'active_menu' => 'dashboard',
            'active_submenu' => 'summary',
            'active_tab' => 'summary',
            'count_accounts' => $count_accounts,
            'count_pages' => $count_pages,
            'count_contact_messages' => $count_contact_messages,
            'count_unread_contact_messages' => $count_unread_contact_messages,
            'last_accounts' => $last_accounts,
            'last_contact_messages' => $last_contact_messages,

            //'drive_total_mb' => $drive_total_mb, // MB
            //'drive_count_files' => $drive_count_files,
        ]);
    }


    public function ajax_fetch(Request $request)
    {
        $source = $request->source;
        if (!$source) return null;

        $term = $request->input('term', '');
        if (empty($term)) {
            return array();
        }


        // Search in registered users accounts     
        if ($source == 'users') {
            $users = User::where('role', 'user')->whereNull('deleted_at')->where(function ($query) use ($term) {
                $query->where('name', 'like', "%$term%")
                    ->orwhere('email', 'like', "%$term%");
            })
                ->limit(25)->get(['id', DB::raw('CONCAT(`name`, " - ", `email`) AS text')]);
            return ['results' => $users];
        }


        // Search in internals
        if ($source == 'internals') {
            $users = User::where('role', 'internal')->whereNull('deleted_at')->where(function ($query) use ($term) {
                $query->where('name', 'like', "%$term%")
                    ->orwhere('email', 'like', "%$term%");
            })
                ->limit(25)->get(['id', DB::raw('CONCAT(`name`, " - ", `email`) AS text')]);
            return ['results' => $users];
        }


        // Search in admins
        if ($source == 'admins') {
            $users = User::where('role', 'admin')->whereNull('deleted_at')->where(function ($query) use ($term) {
                $query->where('name', 'like', "%$term%")
                    ->orwhere('email', 'like', "%$term%");
            })
                ->limit(25)->get(['id', DB::raw('CONCAT(`name`, " - ", `email`) AS text')]);
            return ['results' => $users];
        }


        // Search in internals and admins
        if ($source == 'internals_admins') {
            $users = User::whereNull('deleted_at')
                ->where(function ($query) {
                    $query->where('role', 'internal')
                        ->orwhere('role_id', 'admin');
                })
                ->where(function ($query) use ($term) {
                    $query->where('name', 'like', "%$term%")
                        ->orwhere('email', 'like', "%$term%");
                })
                ->limit(25)->get(['id', DB::raw('CONCAT(`name`, " - ", `email`) AS text')]);
            return ['results' => $users];
        }


        // Search in all accounts
        if ($source == 'accounts') {
            $users = User::whereNull('deleted_at')
                ->where(function ($query) use ($term) {
                    $query->where('name', 'like', "%$term%")
                        ->orwhere('email', 'like', "%$term%");
                })
                ->limit(25)->get(['id', DB::raw('CONCAT(`name`, " - ", `email`) AS text')]);
            return ['results' => $users];
        }


        // Search in active pages
        if ($source == 'pages') {

            $pages = DB::table('pages')
                ->leftJoin('page_content', 'page_content.page_id', '=', 'pages.id')
                ->select('pages.id as id', 'page_content.title as text')
                ->where('page_content.title', 'like', "%$term%")
                ->where('active', 1)
                ->limit(25)
                ->get(['id', 'title']);


            return ['results' => $pages];
        } // end if


        // Search in posts categories
        if ($source == 'posts_categ') {
            $posts_categories = DB::table('posts_categ')
                ->where('active', 1)
                ->where('title', 'like', "%$term%")
                ->limit(25)
                ->get(['id', DB::raw('CONCAT(`title`) AS text')]);

            return ['results' => $posts_categories];
        } // end if


        // Search in posts tags
        if ($source == 'posts_tags') {
            $term = trim($term);
            $array = array();

            $tags = DB::table('posts_tags')
                ->where('tag', 'like', "%$term%")
                ->orderBy('counter', 'desc')
                ->limit(25)
                ->get();

            foreach ($tags as $tag) {
                if (!in_array($tag->tag, $array))
                    array_push($array, $tag->tag);
            }

            return json_encode($array);
        } // end if



        // Search in active blocks
        if ($source == 'blocks') {
            $pages = DB::table('blocks')
                ->where('active', 1)
                ->where('label', 'like', "%$term%")
                ->limit(25)
                ->get(['id', DB::raw('CONCAT(`label`) AS text')]);

            return ['results' => $pages];
        } // end if

    }


    public function generate_sitemap()
    {
        Tools::generateSitemap();

        return redirect(route('admin.config', ['module' => 'seo']))->with('success', 'updated');
    }
}
