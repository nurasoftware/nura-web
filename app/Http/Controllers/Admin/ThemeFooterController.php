<?php

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

namespace App\Http\Controllers\Admin;

use App\Models\Config;
use App\Models\Upload;
use App\Models\Language;
use App\Models\ThemeFooterBlock;
use App\Models\ThemeFooterBlockContent;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;

class ThemeFooterController extends Controller
{


    /**
     * Edit footer
     */
    public function index()
    {
        return view('admin.index', [
            'view_file' => 'theme.config-footer',
            'active_menu' => 'theme',
            'active_submenu' => 'theme',
            'menu_section' => 'footer',
            'module' => 'footer',
        ]);
    }


    /**
     * Update theme
     */
    public function update(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $inputs = $request->all();

        Config::update_config($inputs);

        return redirect(route('admin.theme.footer'))->with('success', 'updated');
    }


    /**
     * Edit footer content
     */
    public function content(Request $request)
    {
        return view('admin.index', [
            'view_file' => 'theme.config-footer-content',
            'active_menu' => 'theme',
            'active_submenu' => 'theme',
            'menu_section' => 'footer',
            'footer' => $request->footer,
        ]);
    }


    /**
     * Update footer content   
     */
    public function update_content(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        if (!($request->footer == 'primary' || $request->footer == 'secondary')) return redirect(route('admin.theme.footer'));

        $last_pos = ThemeFooterBlock::where('footer', $request->footer)->where('col', $request->col)->orderByDesc('position')->value('position');
        $position = ($last_pos ?? 0) + 1;

        if ($request->footer == 'primary') $layout = Config::config()->footer_columns ?? 1;
        if ($request->footer == 'secondary') $layout = Config::config()->footer2_columns ?? 1;

        $block = ThemeFooterBlock::create([
            'type' => $request->type,
            'footer' => $request->footer,
            'col' => $request->col, // column number
            'layout' => $layout, // number of columns
            'position' => $position,
        ]);

        return redirect(route('admin.theme.footer.block', ['id' => $block->id]));
    }


    /**
     * Remove the specified block content from footer
     */
    public function delete_content(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        if (!($request->footer)) return redirect(route('admin.theme.footer'));

        ThemeFooterBlockContent::where('block_id', $request->block_id)->delete();
        ThemeFooterBlock::where('id', $request->block_id)->delete();

        return redirect(route('admin.theme.footer.content', ['footer' => $request->footer]))->with('success', 'deleted');
    }


    /**
     * Ajax sortable footer blocks
     */
    public function sortable(Request $request)
    {
        $i = 0;

        if ($request->footer == 'primary') $layout = Config::config()->footer_columns ?? 1;
        if ($request->footer == 'secondary') $layout = Config::config()->footer2_columns ?? 1;

        $records = $request->all();

        foreach ($records['item'] as $key => $value) {

            ThemeFooterBlock::where('footer', $request->footer)
                ->where('col', $request->col)
                ->where('layout', $layout)
                ->where('id', $value)
                ->update([
                    'position' => $i,
                ]);

            $i++;
        }
    }


    /**
     * Show block
     */
    public function block(Request $request)
    {
        $block = ThemeFooterBlock::find($request->id);
        if (!$block) return redirect(route('admin'));

        // Retrieve block content for each language.
        $content_langs = Language::where('status', '!=', 'disabled')->with(['footer_block_content' => function ($query) use ($request) {
            $query->where('block_id', $request->id);
        }])->orderByDesc('is_default')->get();

        return view('admin.index', [
            'view_file' => 'blocks.simple-blocks.' . $block->type,
            'active_menu' => 'theme',
            'menu_section' => 'footer',
            'block_module' => 'footer',
            'block' => $block,
            'is_footer_block' => 1,
            'content_langs' => $content_langs,
            'referer' => request()->headers->get('referer'),
        ]);
    }



    /**
     * Update block    
     */
    public function block_update(Request $request)
    {
        // Extra content ALERT 
        if ($request->type == 'image') {
            $block_extra = array('shaddow' => $request->shaddow ?? null);
            ThemeFooterBlock::where('id', $request->id)->update(['extra' => serialize($block_extra)]);
        }

        // Extra content LINKS        
        if ($request->type == 'links') {
            $block_extra = array('new_tab' => $request->new_tab ?? null, 'display_style' => $request->display_style);
            ThemeFooterBlock::where('id', $request->id)->update(['extra' => serialize($block_extra)]);
        }

        // Extra content MAP       
        if ($request->type == 'map') {
            $block_extra = array('height' => $request->height ?? 400, 'zoom' => $request->zoom ?? 16, 'address' => $request->address);
            ThemeFooterBlock::where('id', $request->id)->update(['extra' => serialize($block_extra)]);
        }

        // Extra content POSTS WIDGET            
        if ($request->type == 'posts') {
            $block_extra = array('items' => $request->items, 'content' => $request->content, 'categ_badge' => $request->categ_badge, 'style' => $request->style, 'show_image' => $request->show_image, 'show_date' => $request->show_date, 'show_author' => $request->show_author, 'titles_font_size' => $request->titles_font_size);
            ThemeFooterBlock::where('id', $request->id)->update(['extra' => serialize($block_extra)]);
        }


        // ***************************************************
        // Block CONTENT
        // ***************************************************
        $langs = Language::get_languages();

        $inputs = $request->except('_token');

        // UPDATE CONTENT
        foreach ($langs as $lang) {
            $content = null;

            // Simple text
            if ($request->type == 'text') {
                $text_title = $request['title_' . $lang->id];
                $text_content = $request['content_' . $lang->id];

                $content = array('title' => $text_title ?? null, 'content' => $text_content ?? null);
                $content = serialize($content);
                ThemeFooterBlockContent::updateOrCreate(['block_id' => $request->id, 'lang_id' => $lang->id], ['content' => $content]);
            }

            // EDITOR / CUSTOM
            if ($request->type == 'editor' || $request->type == 'custom') {
                $content = $request['content_' . $lang->id];
                ThemeFooterBlockContent::updateOrCreate(['block_id' => $request->id, 'lang_id' => $lang->id], ['content' => $content]);

                // header data
                $header_array = array();
                if ($inputs['add_header_' . $lang->id] ?? null) {
                    $header_array = array('add_header' => 'on', 'title' => $inputs["header_title_$lang->id"], 'content' =>  $inputs["header_content_$lang->id"]);
                    $header_content = serialize($header_array);
                    ThemeFooterBlockContent::where(['block_id' => $request->id, 'lang_id' => $lang->id])->update(['header' => $header_content]);
                }
            }

            // IMAGE
            if ($request->type == 'image') {
                $image_db = null;
                if ($request->hasFile('image_' . $lang->id)) {
                    $validator = Validator::make($request->all(), ['image' => 'mimes:jpeg,jpg,png,gif,ico']);
                    if (!$validator->fails()) $image_db = Upload::storeFile($request->file('image_' . $lang->id));
                }
                $content = array('image' => $image_db->file ?? $request['existing_image_' . $lang->id] ?? null, 'title' => $request['title_' . $lang->id], 'caption' => $request['caption_' . $lang->id], 'url' => $request['url_' . $lang->id]);
                $content = serialize($content);
                ThemeFooterBlockContent::updateOrCreate(['block_id' => $request->id, 'lang_id' => $lang->id], ['content' => $content]);

                // header data
                $header_array = array();
                if ($inputs['add_header_' . $lang->id] ?? null) {
                    $header_array = array('add_header' => 'on', 'title' => $inputs["header_title_$lang->id"], 'content' =>  $inputs["header_content_$lang->id"]);
                    $header_content = serialize($header_array);
                    ThemeFooterBlockContent::where(['block_id' => $request->id, 'lang_id' => $lang->id])->update(['header' => $header_content]);
                }
            }


            // LINKS
            if ($request->type == 'links') {
                $post_key_title = 'a_title_' . $lang->id;
                $post_key_url = 'a_url_' . $lang->id;
                $post_key_icon = 'a_icon_' . $lang->id;
                $links_array_key = 'links_array_' . $lang->id;
                $links_array_key = array();
                $counter_key = 'numb_items_' . $lang->id;
                $counter_key = count(array_filter($_POST[$post_key_url]));

                for ($i = 0; $i < $counter_key; $i++) {
                    if (!(empty(array_filter($_POST[$post_key_title])) && empty(array_filter($_POST[$post_key_url]))))
                        $links_array_key[$i] = array('title' => $inputs["$post_key_title"][$i], 'url' => $inputs["$post_key_url"][$i], 'icon' => $inputs["$post_key_icon"][$i]);
                }
                $content = serialize($links_array_key);
                ThemeFooterBlockContent::updateOrInsert(['block_id' => $request->id, 'lang_id' => $lang->id], ['content' => $content]);

                // header data
                $header_array = array();
                if ($inputs['add_header_' . $lang->id] ?? null) {
                    $header_array = array('add_header' => 'on', 'title' => $inputs["header_title_$lang->id"], 'content' =>  $inputs["header_content_$lang->id"]);
                    $header_content = serialize($header_array);
                    ThemeFooterBlockContent::where(['block_id' => $request->id, 'lang_id' => $lang->id])->update(['header' => $header_content]);
                }
            }
        } // end langs

        if ($request->hide ?? null) $hide = 1;
        ThemeFooterBlock::where('id', $request->id)->update(['label' =>  $request->label ?? null,  'hide' => $hide ?? 0, 'updated_at' => now()]);

        if ($request->referer) return redirect($request->referer)->with('success', 'updated');
        else return redirect(route('admin.theme.footer'))->with('success', 'updated');
    }
}
