<?php

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use App\Models\ThemeStyle;
use App\Models\ThemeConfig;
use App\Models\Theme;


class ThemeStyleController extends Controller
{

    /**
     * Show all resources
     */
    public function index()
    {

        $customStyles = ThemeStyle::orderBy('label')->paginate(10);

        return view('admin.index', [
            'view_file' => 'theme.styles',
            'active_menu' => 'theme',
            'active_submenu' => 'theme',
            'menu_section' => 'styles',
            'customStyles' => $customStyles,
        ]);
    }


    /**
     * Show resource
     */
    public function show(Request $request)
    {

        $style = $request->style;
        if (!$style) return redirect(route('admin.theme.styles.index'));
        if (!($style == 'global' || $style == 'nav' || $style == 'nav_dropdown' || $style == 'footer' || $style == 'footer2' || $style == 'posts')) return redirect(route('admin.theme.styles.index'));

        $theme_config = ThemeConfig::where('theme', 'builder')->where('style', $style)->pluck('value', 'name')->toArray();

        return view('admin.index', [
            'view_file' => 'theme.style-' . $style,
            'active_menu' => 'theme',
            'active_submenu' => 'theme',
            'menu_section' => 'styles',
            'style' => $style,
            'theme_config' => (object)$theme_config,
            'fonts' => Theme::theme_fonts(),
            'font_sizes' => Theme::theme_font_sizes(),
        ]);
    }


    /**
     * Update style
     */
    public function update(Request $request)
    {

        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $style = $request->style;
        if (!$style) return redirect(route('admin.theme.styles.index'));
        if (!($style == 'global' || $style == 'nav' || $style == 'nav_dropdown' || $style == 'footer' || $style == 'footer2' || $style == 'docs' || $style == 'forum' || $style == 'posts')) return redirect(route('admin.theme.styles.index'));

        $inputs = $request->except(['_token', '_method']);

        foreach ($inputs as $key => $value) {
            echo $style . " - " . $key . ' - ' . $value . "<br>";
            ThemeConfig::updateOrCreate(['theme' => 'builder', 'style' => $style, 'name' => $key], ['value' => $value]);
        };

        //exit;

        // regenerate css file
        ThemeConfig::generate_global_css($theme = 'builder');

        return redirect(route('admin.theme.styles.show', ['style' => $request->style]))->with('success', 'updated');
    }


    /**
     * Show resource
     */
    public function show_custom(Request $request)
    {

        $style = ThemeStyle::find($request->id);
        if (!$style) return redirect(route('admin.theme.styles.index'));

        return view('admin.index', [
            'view_file' => 'theme.style-custom',
            'active_menu' => 'theme',
            'active_submenu' => 'theme',
            'menu_section' => 'styles',
            'style' => $style,
            'fonts' => Theme::theme_fonts(),
            'font_sizes' => Theme::theme_font_sizes(),
        ]);
    }


    /**
     * Create resource
     */
    public function store_custom(Request $request)
    {

        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $validator = Validator::make($request->all(), [
            'label' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.theme.styles.index'))->withErrors($validator)->withInput();

        if (ThemeStyle::where('label', $request->label)->exists()) return redirect(route('admin.theme.styles.index'))->with('error', 'duplicate');

        $style = ThemeStyle::create([
            'label' => $request->label,
            'font_family' => config('nura.defaults.font_family'),
        ]);

        $source_style_id = $request->source_style_id;
        if ($source_style_id) {
            $source = ThemeStyle::find($source_style_id);
            if ($source) {
                ThemeStyle::where('id', $style->id)->update([
                    'text_size' => $source->text_size,
                    'text_color' => $source->text_color,
                    'text_font_weight' => $source->text_font_weight,
                    'text_align' => $source->text_align,
                    'link_color' => $source->link_color,
                    'link_hover_color' => $source->link_hover_color,
                    'link_underline_color' => $source->link_underline_color,
                    'link_underline_color_hover' => $source->link_underline_color_hover,
                    'link_decoration' => $source->link_decoration,
                    'link_hover_decoration' => $source->link_hover_decoration,
                    'link_font_weight' => $source->link_font_weight,
                    'link_underline_thickness' => $source->link_underline_thickness,
                    'link_underline_offset' => $source->link_underline_offset,
                    'font_family' => $source->font_family,
                    'font_family_weights' => $source->font_family_weights ?? '400',
                    'title_size' => $source->title_size,
                    'subtitle_size' => $source->subtitle_size,
                    'title_font_weight' => $source->title_font_weight,
                    'subtitle_font_weight' => $source->subtitle_font_weight,
                    'bg_color' => $source->bg_color,
                    'caption_color' => $source->caption_color,
                    'caption_size' => $source->caption_size,
                    'caption_style' => $source->caption_style,
                ]);
            }
        }

        // regenerate css file
        Theme::generate_styles_css();

        return redirect(route('admin.theme.custom_styles.show', ['id' => $style->id]))->with('success', 'created');
    }


    /**
     * Update style
     */
    public function update_custom(Request $request)
    {

        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $style = ThemeStyle::find($request->id);
        if (!$style) return redirect(route('admin.theme.styles.index'));

        if (!$request->label) return redirect(route('admin.theme.custom_styles.show', ['id' => $request->id]))->with('error', 'no_label');

        if (ThemeStyle::where('label', $request->label)->where('id', '!=', $request->id)->exists())
            return redirect(route('admin.theme.custom_styles.show', ['id' => $request->id]))->with('error', 'duplicate');

        if ($request->use_custom_bg ?? null) $bg_color = $request->bg_color;
        else $bg_color = null;

        // font family weights
        $font_family = $request->font_family;
        $all_fonts = Theme::theme_fonts();
        foreach ($all_fonts as $font) {
            if ($font_family == $font->value) $font_family_weights = $font->weight;
        }

        ThemeStyle::where('id', $request->id)->update([
            'label' => $request->label,
            'text_size' => $request->text_size ?? null,
            'text_color' => $request->text_color ?? null,
            'text_font_weight' => $request->text_font_weight ?? null,
            'text_align' => $request->text_align,
            'link_color' => $request->link_color ?? null,
            'link_hover_color' => $request->link_hover_color ?? null,
            'link_underline_color' => $request->link_underline_color ?? null,
            'link_underline_color_hover' => $request->link_underline_color_hover ?? null,
            'link_decoration' => $request->link_decoration ?? null,
            'link_hover_decoration' => $request->link_hover_decoration ?? null,
            'link_font_weight' => $request->link_font_weight ?? null,
            'link_underline_thickness' => $request->link_underline_thickness ?? null,
            'link_underline_offset' => $request->link_underline_offset ?? null,
            'font_family' => $font_family ?? null,
            'font_family_weights' => $font_family_weights ?? '400',
            'bg_color' => $bg_color ?? null,
            'title_size' => $request->title_size ?? null,
            'title_font_weight' => $request->title_font_weight ?? null,
            'subtitle_font_weight' => $request->subtitle_font_weight,
            'subtitle_size' => $request->subtitle_size ?? null,
            'caption_color' => $request->caption_color,
            'caption_size' => $request->caption_size,
            'caption_style' => $request->caption_style,
        ]);

        // regenerate css file
        Theme::generate_styles_css();

        return redirect(route('admin.theme.custom_styles.show', ['id' => $request->id]))->with('success', 'updated');
    }


    /**
     * Remove the specified resource
     */
    public function destroy_custom(Request $request)
    {

        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $style = ThemeStyle::find($request->id);
        if (!$style) return redirect(route('admin.theme.styles.index'));

        ThemeStyle::where('id', $request->id)->delete();

        return redirect(route('admin.theme.styles.index'))->with('success', 'deleted');
    }


    public function preview_style(Request $request)
    {
        $style = ThemeStyle::find($request->id);

        return view('admin.preview-style-custom', [
            'style' => $style,
        ]);
    }
}
