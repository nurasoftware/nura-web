<?php

namespace App\Http\Controllers\Admin;

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <contact@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use App\Models\Upload;
use App\Models\User;
use Auth;

class UserController extends Controller
{

    /**
     * Show all resources
     */
    public function index(Request $request)
    {
        $search_terms = $request->search_terms;
        $search_role = $request->search_role;
        $search_email_verified = $request->search_email_verified;
        $openmodal = $request->openmodal; // for automatic open modal to create account                

        $accounts = User::whereNull('deleted_at');

        if ($search_email_verified == 'yes') $accounts = $accounts->whereNotNull('email_verified_at');
        if ($search_email_verified == 'no') $accounts = $accounts->whereNull('email_verified_at');
        if ($search_role) $accounts = $accounts->where('role', $search_role);

        if ($search_terms) $accounts = $accounts->where(function ($query) use ($search_terms) {
            $query->where('users.name', 'like', "%$search_terms%")
                ->orWhere('users.email', 'like', "%$search_terms%");
        });

        $accounts = $accounts->orderByDesc('id')->paginate(20);

        return view('admin.index', [
            'view_file' => 'accounts.index',
            'active_menu' => 'accounts',
            'search_terms' => $search_terms,
            'search_email_verified' => $search_email_verified,
            'search_role' => $search_role,
            'accounts' => $accounts,
            'openmodal' => $openmodal,
        ]);
    }


    /**
     * Show resource
     */
    public function show(Request $request)
    {
        $account = User::find($request->id);
        if (!$account) return redirect(route('admin.accounts.index'));

        return view('admin.index', [
            'view_file' => 'accounts.show',
            'active_menu' => 'accounts',
            'account' => $account,
            'menu_section' => 'details',
        ]);
    }


    /**
     * Create resource
     */
    public function store(Request $request)
    {
        $search_role = $request->search_role;

        $validator = Validator::make($request->all(), [
            'name' => 'required',
            'email' => 'required|email|unique:App\Models\User,email',
            'password' => 'required|min:8',
            'role' => 'required|in:admin,internal,user',
        ]);

        if ($validator->fails()) return redirect(route('admin.accounts.index'))->withErrors($validator)->withInput();

        $user = User::create([
            'code' => Str::random(16),
            'name' => $request->name,
            'email' => $request->email,
            'role' => $request->role,
            'password' => Hash::make($request->password),
            'email_verified_at' => $request->has('email_verified_at') ? now() : null,
        ]);

        // process avatar     
        if ($request->hasFile('avatar')) Upload::createAvatar($request->file('avatar'), $user->id);

        return redirect(route('admin.accounts.index', ['search_role' => $search_role]))->with('success', 'created');
    }


    /**
     * Update resource
     */
    public function update(Request $request)
    {
        // only admins can set admin role
        if ($request->role == 'admin' && Auth::user()->role != 'admin') return redirect(route('admin.accounts.index'));

        $user = User::find($request->id);
        if (!$user) return redirect(route('admin.accounts.index'));

        // only admins can set another admins
        if ($request->role == 'admin' && Auth::user()->role != 'admin') return redirect(route('admin.accounts.show', ['id' => $request->id]))->withErrors('invalid_role')->withInput();

        $validator = Validator::make($request->all(), [
            'name' => 'required',
            'role' => 'required|in:admin,internal,user',
            'email' => [
                'required',
                'email',
                Rule::unique('users')->ignore($user),
            ],
        ]);

        if ($validator->fails()) return redirect(route('admin.accounts.show', ['id' => $request->id]))->withErrors($validator)->withInput();

        if ($request->has('email_verified_at'))
            if ($user->email_verified_at) $email_verified_at = $user->email_verified_at;
            else $email_verified_at = now();
        else $email_verified_at = null;

        User::where('id', $request->id)->update([
            'name' => $request->name,
            'email' => $request->email,
            'role' => $request->role,
            'email_verified_at' => $email_verified_at,
        ]);

        // change password
        if ($request->password) {
            $validator = Validator::make($request->all(), [
                'password' => 'min:8',
            ]);

            if ($validator->fails()) return redirect(route('admin.accounts.show', ['id' => $request->id]))->withErrors($validator)->withInput();

            User::where('id', $request->id)->update([
                'password' => Hash::make($request->password)
            ]);
        }

        // process avatar        
        if ($request->hasFile('avatar')) Upload::createAvatar($request->file('avatar'), $request->id);

        return redirect(route('admin.accounts.show', ['id' => $request->id]))->with('success', 'updated');
    }


    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {
        // logged user can not delete own account
        if (Auth::user()->id == $request->id) return redirect(route('admin.accounts.index'));

        // soft delete
        User::where('id', $request->id)->delete();

        return redirect(route('admin.accounts.index', ['search_role' => $request->search_role]))->with('success', 'deleted');
    }


    /**
     * Accounts permissions
     */
    public function permissions(Request $request)
    {
        $role_id_internal = User::get_role_id_from_role('internal');

        $search_user_id = $request->search_user_id;
        $search_terms = $request->search_terms;

        $internal_accounts = DB::table('users')
            ->where('role_id', $role_id_internal)
            ->where('active', 1);

        if ($search_terms)
            $internal_accounts = $internal_accounts->where(function ($query) use ($search_terms) {
                $query->where('users.name', 'like', "%$search_terms%")
                    ->orWhere('users.email', 'like', "%$search_terms%")
                    ->orWhere('users.code', 'like', "%$search_terms%");
            });

        if ($search_user_id)
            $internal_accounts = $internal_accounts->where('id', $search_user_id);

        $internal_accounts = $internal_accounts->orderBy('name', 'asc')->get();

        $modules_permissions = array();

        $modules = DB::table('sys_modules')->where('status', '!=', 'disabled')->orderBy('label', 'asc')->get();

        foreach ($modules as $module) {

            $permissions = array();

            $module_perms = DB::table('sys_permissions')->where('module', $module->module)->orderBy('position', 'asc')->orderBy('permission', 'asc')->get();

            foreach ($module_perms as $perm) {
                $permissions[] = array('id' => $perm->id, 'label' => $perm->label, 'permission' => $perm->permission, 'description' => $perm->description);
            }

            $modules_permissions[] = array('module_id' => $module->id, 'module' => $module->module, 'module_label' => $module->label, 'module_status' => $module->status, 'multilang' => $module->multilang, 'permissions' => $permissions);
        }

        return view('central.admin.account', [
            'active_menu' => 'config',
            'active_submenu' => 'permissions',
            'view_file' => 'accounts.permissions',
            'internal_accounts' => $internal_accounts,
            'modules_permissions' => json_decode(json_encode($modules_permissions)),
            // array to object
            'search_user_id' => $search_user_id,
            'search_terms' => $search_terms,
        ]);
    }


    /**
     * Update accounts permissions
     */
    public function update_permissions(Request $request)
    {

        if (!(logged_user()->role == 'admin'))
            return redirect(route('admin'));

        // disable action in demo mode:
        if (config('app.demo_mode'))
            return redirect(route('admin'))->with('error', 'demo');

        $role_id_internal = User::get_role_id_from_role('internal');

        $internal_accounts = DB::table('users')->where('role_id', $role_id_internal)->where('active', 1)->orderBy('name', 'asc')->get();
        $modules = DB::table('sys_modules')->orderBy('status', 'asc')->orderBy('module')->get();

        foreach ($internal_accounts as $account) {

            foreach ($modules as $module) {

                $langs = null;

                $name = $module->id . '_' . $account->id;
                $langs_key = 'langs_' . $module->id . '_' . $account->id;

                $permission_id = $request->$name;

                $langs = $request->$langs_key;
                if ($langs) {
                    $langs_string = implode(',', $langs);
                } else
                    $langs_string = null;

                if ($permission_id > 0) {
                    DB::table('users_permissions')
                        ->updateOrInsert(
                            ['module' => $module->module, 'user_id' => $account->id],
                            ['module' => $module->module, 'permission_id' => $permission_id, 'user_id' => $account->id, 'langs' => $langs_string ?? null],
                        );
                } else {
                    DB::table('users_permissions')->where('module', $module->module)->where('user_id', $account->id)->delete();
                }
            }
        }

        return redirect(route('admin.accounts.permissions'))->with('success', 'updated');
    }
}
