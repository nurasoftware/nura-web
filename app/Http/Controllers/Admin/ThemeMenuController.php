<?php

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use App\Models\ThemeMenu;
use App\Models\ThemeMenuLang;
use App\Models\ThemeButton;
use App\Models\Language;

class ThemeMenuController extends Controller
{

    public function __construct()
    {
        $this->buttons = ThemeButton::orderByDesc('is_default')->orderBy('label')->paginate(25);
        $this->langs = Language::get_languages();
    }

    public function index()
    {
        $links = ThemeMenu::whereNull('parent_id')->orderBy('position')->get();

        return view('admin.index', [
            'view_file' => 'theme.config-menu',
            'active_menu' => 'theme',
            'active_submenu' => 'theme',
            'menu_section' => 'menu',
            'links' => $links,
        ]);
    }


    public function store(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $validator = Validator::make($request->all(), [
            'type' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.theme.menu'))->withErrors($validator)->withInput();

        $type = $request->type;

        if ($type == 'custom') {
            $value = $request->custom_url;
        }

        if ($type == 'page') {
            $value = $request->page_id;
        }

        $last_pos = ThemeMenu::orderByDesc('position')->value('position');
        $position = ($last_pos ?? 0) + 1;

        if ($request->has('new_tab')) $new_tab = 1;
        else $new_tab = 0;

        $link = ThemeMenu::create([
            'type' => $type,
            'value' => $value ?? null,
            'position' => $position,
            'new_tab' => $new_tab,
            'btn_id' => $request->btn_id ?? null,
            'css_class' => $request->css_class ?? null,
            'icon' => $request->icon
        ]);

        foreach ($this->langs as $lang) {
            ThemeMenuLang::create(['link_id' => $link->id, 'lang_id' => $lang->id, 'label' => $request['label_' . $lang->id]]);
        }

        // regenerate menu links
        ThemeMenu::generate_menu_links();

        return redirect(route('admin.theme.menu'))->with('success', 'created');
    }



    public function update(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $validator = Validator::make($request->all(), [
            'type' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.theme.menu'))->withErrors($validator)->withInput();

        $type = $request->type;

        if ($type == 'custom') {
            $value = $request->custom_url;
        }

        if ($type == 'page') {
            $value = $request->page_id ?? null;
            if (!$value) return redirect(route('admin.theme.menu'));
        }

        if ($request->has('new_tab')) $new_tab = 1;
        else $new_tab = 0;

        ThemeMenu::where('id', $request->id)->update(['type' => $type, 'value' => $value ?? null, 'new_tab' => $new_tab, 'btn_id' => $request->btn_id ?? null, 'css_class' => $request->css_class ?? null, 'icon' => $request->icon]);

        foreach ($this->langs as $lang) {
            ThemeMenuLang::updateOrCreate(
                ['link_id' => $request->id, 'lang_id' => $lang->id],
                ['label' => $request['label_' . $lang->id]]
            );
        }

        // regenerate menu links
        ThemeMenu::generate_menu_links();

        return redirect(route('admin.theme.menu'))->with('success', 'updated');
    }


    public function destroy(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $parent_ids = ThemeMenu::where('parent_id', $request->id)->get();
        foreach ($parent_ids as $parent) {
            ThemeMenuLang::where('link_id', $parent->parent_id)->delete();
        }

        ThemeMenuLang::where('link_id', $request->id)->delete();
        ThemeMenu::where('id', $request->id)->delete();
        ThemeMenu::where('parent_id', $request->id)->delete();

        // regenerate menu links
        ThemeMenu::generate_menu_links();

        return redirect(route('admin.theme.menu'))->with('success', 'deleted');
    }


    /**
     * Ajax sortable
     */
    public function sortable(Request $request)
    {
        $i = 1;

        $items = $request->all();

        foreach ($items['item'] as $key => $value) {

            ThemeMenu::where('id', $value)
                ->update([
                    'position' => $i,
                ]);

            $i++;
        }

        // regenerate menu links
        ThemeMenu::generate_menu_links();
    }


    public function index_dropdowns(Request $request)
    {

        if (!$request->link_id) return redirect(route('admin'));

        $parent_link = ThemeMenu::find($request->link_id);
        if (!$parent_link) return redirect(route('admin'));

        $links = ThemeMenu::where('parent_id', $request->link_id)->orderBy('position')->get();

        return view('admin.index', [
            'view_file' => 'theme.config-menu-dropdown',
            'active_menu' => 'theme',
            'active_submenu' => 'theme',
            'menu_section' => 'menu',
            'parent_link' => $parent_link,
            'is_dropdown' => 1,
            'links' => $links,
            'langs' => $this->langs,
            'buttons' => $this->buttons,
        ]);
    }


    public function store_dropdown(Request $request)
    {

        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $link_id = $request->link_id;
        if (!$link_id) return redirect(route('admin'));

        $parent_link = ThemeMenu::find($link_id);
        if (!$parent_link) return redirect(route('admin'));

        $validator = Validator::make($request->all(), [
            'type' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.theme.menu.dropdown', ['link_id' => $link_id]))->withErrors($validator)->withInput();

        $type = $request->type;

        if ($type == 'custom') {
            $value = $request->custom_url;
        }

        if ($type == 'page') {
            $value = $request->page_id;
        }

        if ($type == 'posts_categ') {
            $value = $request->post_categ_id;
        }

        if ($type == 'cart_categ') {
            $value = $request->cart_categ_id;
        }

        /*
        if ($type == 'contact') {
            $value = Page::where('is_contactpage', 1)->value('id');
        }
        */

        $last_pos = ThemeMenu::orderByDesc('position')->value('position');
        $position = ($last_pos ?? 0) + 1;

        if ($request->has('new_tab')) $new_tab = 1;
        else $new_tab = 0;

        $dropdown_link = ThemeMenu::create([
            'parent_id' => $link_id,
            'type' => $type,
            'value' => $value ?? null,
            'position' => $position,
            'new_tab' => $new_tab,
            'icon' => $request->icon
        ]);

        foreach ($this->langs as $lang) {
            ThemeMenuLang::insert(['link_id' => $dropdown_link->id, 'lang_id' => $lang->id, 'label' => $request['label_' . $lang->id]]);
        }

        // regenerate menu links
        ThemeMenu::generate_menu_links();

        return redirect(route('admin.theme.menu.dropdown', ['link_id' => $link_id]))->with('success', 'created');
    }


    public function update_dropdown(Request $request)
    {

        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $link_id = $request->id;
        $parent_id = $request->parent_id;

        if (!$link_id) return redirect(route('admin'));

        $parent_link = ThemeMenu::find($link_id);
        if (!$parent_link) return redirect(route('admin'));

        $validator = Validator::make($request->all(), [
            'type' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.theme.menu.dropdown', ['link_id' => $parent_id]))->withErrors($validator)->withInput();

        $type = $request->type;

        if ($type == 'custom') {
            $value = $request->custom_url;
        }

        if ($type == 'page') {
            $value = $request->page_id;
        }

        if ($type == 'cart_categ') {
            $value = $request->cart_categ_id;
        }

        if ($type == 'posts_categ') {
            $value = $request->post_categ_id;
        }

        /*
        if ($type == 'contact') {
            $value = Page::where('is_contactpage', 1)->value('id');
        }
        */

        if ($request->has('new_tab')) $new_tab = 1;
        else $new_tab = 0;

        ThemeMenu::where('id', $link_id)->update(['type' => $type, 'value' => $value ?? null, 'new_tab' => $new_tab, 'icon' => $request->icon]);

        foreach ($this->langs as $lang) {
            ThemeMenuLang::UpdateOrCreate(
                ['link_id' => $link_id, 'lang_id' => $lang->id],
                ['label' => $request['label_' . $lang->id]]
            );
        }

        // regenerate menu links
        ThemeMenu::generate_menu_links();

        return redirect(route('admin.theme.menu.dropdown', ['link_id' => $parent_id]))->with('success', 'updated');
    }


    public function destroy_dropdown(Request $request)
    {

        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $link_id = $request->id;
        $parent_id = $request->parent_id;

        if (!$link_id) return redirect(route('admin'));

        $parent_link = ThemeMenu::find($parent_id);
        if (!$parent_link) return redirect(route('admin'));

        ThemeMenu::where('id', $link_id)->delete();
        ThemeMenuLang::where('link_id', $link_id)->delete();

        // regenerate menu links
        ThemeMenu::generate_menu_links();

        return redirect(route('admin.theme.menu.dropdown', ['link_id' => $parent_id]))->with('success', 'deleted');
    }

    /**
     * Ajax sortable dropdown links
     */
    public function sortable_dropdowns(Request $request)
    {
        $i = 1;

        $items = $request->all();

        foreach ($items['item'] as $key => $value) {

            ThemeMenu::where('id', $value)
                ->update([
                    'position' => $i,
                ]);

            $i++;
        }

        // regenerate menu links
        ThemeMenu::generate_menu_links();
    }
}
