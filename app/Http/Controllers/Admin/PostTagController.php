<?php

namespace App\Http\Controllers\Admin;

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <contact@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use App\Models\PostTag;
use App\Models\Language;

class PostTagController extends Controller
{

    /**
     * Display all resources
     */
    public function index(Request $request)
    {
        $search_terms = $request->search_terms;
        $search_lang_id = $request->search_lang_id;

        $tags = PostTag::with('language');

        if ($search_terms) $tags = $tags->where('post_tags.tag', 'like', "%$search_terms%");
        if ($search_lang_id) $tags = $tags->where('lang_id', $search_lang_id);

        $tags = $tags->orderBy('tag')->paginate(25);

        return view('admin.index', [
            'view_file' => 'posts.tags',
            'active_menu' => 'posts',
            'menu_section' => 'tags',
            'tags' => $tags,
            'search_terms' => $search_terms,
            'search_lang_id' => $search_lang_id,
            'langs' => Language::get_languages()
        ]);
    }



    /**
     * Create new tag
     */
    public function store(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $validator = Validator::make($request->all(), [
            'tag' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.posts.tags'))->withErrors($validator)->withInput();

        $slug = Str::slug($request->tag, '-');

        if (PostTag::where('slug', $slug)->where('lang_id', $request->lang_id)->exists()) return redirect(route('admin.posts.tags'))->with('error', 'duplicate');

        PostTag::create([
            'tag' => $request->tag,
            'lang_id' => $request->lang_id,
            'slug' => $slug,
        ]);

        return redirect(route('admin.posts.tags'))->with('success', 'created');
    }



    /**
     * Update tag
     */
    public function update(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $validator = Validator::make($request->all(), [
            'tag' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.posts.tags'))->withErrors($validator)->withInput();

        $slug = Str::slug($request->tag, '-');

        if (PostTag::where('slug', $slug)->where('lang_id', $request->lang_id)->where('id', '!=', $request->id)->exists()) return redirect(route('admin.posts-tags.index'))->with('error', 'duplicate');

        PostTag::where('id', $request->id)->update([
            'tag' => $request->tag,
            'lang_id' => $request->lang_id,
            'slug' => $slug,
        ]);

        return redirect(route('admin.posts.tags'))->with('success', 'updated');
    }


    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $tag = PostTag::find($request->id);
        if (!$tag) return redirect(route('admin.posts.tags'));

        PostTag::where('id', $request->id)->delete();

        return redirect(route('admin.posts.tags'))->with('success', 'deleted');
    }
}
