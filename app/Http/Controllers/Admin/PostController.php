<?php

namespace App\Http\Controllers\Admin;

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <contact@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

use App\Models\Post;
use App\Models\PostCateg;
use App\Models\PostTag;
use App\Models\PostTagItem;
use App\Models\Upload;
use App\Models\Config;
use App\Models\Language;
use App\Models\ConfigLang;
use App\Models\Block;
use App\Models\BlockContent;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\DriveFile;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use Auth;

class PostController extends Controller
{

    public function categories()
    {
        $categories = PostCateg::whereNull('parent_id')->with('childCategories')->orderBy('title')->get();

        return $categories;
    }


    /**
     * Display all posts
     */
    public function index(Request $request)
    {
        $search_terms = $request->search_terms;
        $search_author = $request->search_author;
        $search_status = $request->search_status;
        $search_categ_id = $request->search_categ_id;
        $search_lang_id = $request->search_lang_id;
        $search_tag_id = $request->search_tag_id;
        $search_featured = $request->search_featured;

        $posts = Post::with('author', 'category', 'language');

        if ($search_status)
            $posts = $posts->where('posts.status', 'like', $search_status);

        if ($search_terms)
            $posts = $posts->where(function ($query) use ($search_terms) {
                $query->where('posts.title', 'like', "%$search_terms%")
                    ->orWhere('posts.search_terms', 'like', "%$search_terms%");
            });

        if ($search_author) {
            $posts = Post::whereHas('author', function ($query) use ($search_author) {
                $query->where('name', 'like', "%$search_author%");
            });
        }

        if ($search_categ_id) {
            $categ = PostCateg::find($search_categ_id);
            $categ_tree_ids = $categ->tree_ids ?? null;
            if ($categ_tree_ids)
                $categ_tree_ids_array = explode(',', $categ_tree_ids);
            else
                $categ_tree_ids_array = array();
            $posts = $posts->whereIn('posts.categ_id', $categ_tree_ids_array);
        }

        if ($search_lang_id)
            $posts = $posts->where('posts.lang_id', $search_lang_id);

        if ($search_featured == 1)
            $posts = $posts->where('posts.featured', 1);

        $posts = $posts->orderByDesc('id')->paginate(20);

        $count_pending_posts = Post::where('status', 'pending')->count();

        return view('admin.index', [
            'view_file' => 'posts.index',
            'active_menu' => 'posts',
            'menu_section' => 'posts',
            'search_terms' => $search_terms,
            'search_author' => $search_author,
            'search_status' => $search_status,
            'search_featured' => $search_featured,
            'search_categ_id' => $search_categ_id,
            'search_lang_id' => $search_lang_id,
            'search_tag_id' => $search_tag_id,
            'posts' => $posts,
            'categories' => $this->categories(),
            'count_pending_posts' => $count_pending_posts,
            'langs' => Language::get_languages(),
        ]);
    }


    /**
     * Show page to add new resource
     */
    public function create(Request $request)
    {

        $lang_id = $request->lang_id ?? Language::get_default_language()->id;

        $categories = PostCateg::with('childCategories', 'language')->whereNull('parent_id')->where('lang_id', $lang_id)
            ->orderByDesc('posts_categ.active')
            ->orderBy('posts_categ.position')
            ->orderBy('posts_categ.title')
            ->get();

        if (count($categories) == 0)
            return redirect(route('admin.posts.categ', ['search_lang_id' => $lang_id]))->with('error', 'create_post_no_lang_categ');

        $all_tags_array = PostTag::with('language')->withcount('data')->orderBy('tag')->pluck('tag')->toArray();
        if (count($all_tags_array) > 0) $all_tags = sprintf("'%s'", implode("','", $all_tags_array));

        return view('admin.index', [
            'view_file' => 'posts.create',
            'active_menu' => 'website',
            'active_submenu' => 'posts',
            'categories' => $categories,
            'all_tags' => $all_tags ?? null,
            'langs' => Language::get_languages(),
        ]);
    }


    /**
     * Create new resource
     */
    public function store(Request $request)
    {

        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $validator = Validator::make($request->all(), [
            'title' => 'required',
            'categ_id' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.posts.create'))->withErrors($validator)->withInput();

        $categ = PostCateg::find($request->categ_id);

        if ($request->slug)
            $slug = Str::slug($request->slug, '-');
        else
            $slug = Str::slug($request->title, '-');

        // check if there is another post with this slug 
        if (Post::where('slug', $slug)->where('lang_id', $categ->lang_id)->exists()) {
            // if exists, add post ID in slug
            $latestID = Post::latest('id')->value('id');
            $slug = $slug . '-' . ($latestID + 1);
        }

        $post = Post::create([
            'lang_id' => $categ->lang_id ?? null,
            'title' => $request->title,
            'categ_id' => $request->categ_id,
            'slug' => $slug,
            'user_id' => Auth::user()->id,
            'summary' => $request->summary,
            'tags' => $request->tags,
            'status' => 'draft',
            'search_terms' => $request->search_terms,
            'meta_title' => $request->meta_title,
            'meta_description' => $request->meta_description,
            'disable_comments' => $request->has('disable_comments') ? 1 : 0,
            'disable_likes' => $request->has('disable_likes') ? 1 : 0,
            'featured' => $request->has('featured') ? 1 : 0,
        ]);

        // get and update the URL
        $url = Post::get_url($post->id);
        Post::where('id', $post->id)->update(['url' => $url]);

        // process image        
        if ($request->hasFile('image')) {
            $validator = Validator::make($request->all(), ['image' => 'file|image|max:5120']); // image mime, max 5 MB
            if (!$validator->fails()) {
                $image = Upload::storeImage($request->file('image'), $oldImageCode = null, $data = array('module' => 'posts', 'item_id' => $post->id));
                if ($image) Post::where('id', $post->id)->update(['image' => $image->code]);
            } else $upload_fails = true;
        }

        PostCateg::recount_categ_items($request->categ_id);

        return redirect(route('admin.posts.content', ['id' => $post->id]))->with('success', 'post_created')->with('upload_fails', $upload_fails ?? null);
    }


    /**
     * Show form to edit resource     
     */
    public function show(Request $request)
    {

        $post = Post::with('author', 'category')->find($request->id);
        if (!$post) return redirect(route('admin.posts.index'));

        //$tags_array = PostTagItem::with('post_tag')->where('post_id', $request->id)->get();
        //$tags = implode(", ", $tags_array);

        /*
        $categories = PostCateg::whereNull('parent_id')
            ->with('childCategories')
            ->leftJoin('sys_lang', 'posts_categ.lang_id', '=', 'sys_lang.id')
            ->select('posts_categ.*', 'sys_lang.name as lang_name', 'sys_lang.code as lang')
            ->orderBy('title')->get();
        */

        $author_count_published_posts = Post::where('user_id', $post->user_id)->where('status', 'active')->count();
        $author_count_pending_posts = Post::where('user_id', $post->user_id)->where('status', 'pending')->count();

        $all_tags_array = PostTag::where('lang_id', $post->lang_id)->orderBy('tag')->pluck('tag')->toArray();
        if (count($all_tags_array) > 0) $all_tags = sprintf("'%s'", implode("','", $all_tags_array));

        return view('admin.index', [
            'view_file' => 'posts.update',
            'active_menu' => 'website',
            'active_submenu' => 'posts',
            'post_menu' => 'details',
            'post' => $post,
            'tags' => $tags_array ?? null,
            'all_tags' => $all_tags ?? null,
            'categories' => $this->categories(),
            'author_count_published_posts' => $author_count_published_posts,
            'author_count_pending_posts' => $author_count_pending_posts,
            'langs' => Language::get_languages(),
        ]);
    }


    /**
     * Update the specified resource     
     */
    public function update(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $post = Post::find($request->id);
        if (!$post) return redirect(route('admin.posts'));

        $validator = Validator::make($request->all(), [
            'title' => 'required',
            'categ_id' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.posts.show', ['id' => $request->id]))->withErrors($validator)->withInput();

        $categ = PostCateg::find($request->categ_id);

        if ($request->slug) $slug = Str::slug($request->slug, '-');
        else $slug = Str::slug($request->title, '-');

        // check if there is another post with this slug (same language)
        if (Post::where('slug', $slug)->where('lang_id', $categ->lang_id)->where('id', '!=', $request->id)->exists()) {
            $slug = $slug . '-' . $request->id;
        }

        if ($request->tags) {
            // Json tags to comma separated string
            $tags_string = PostTag::jsonTagsToString($request->tags);
            $tags_array = explode(',', $tags_string);
            // check if an existing tag as deleted from tags input
            $db_post_tags = PostTagItem::where('post_id', $request->id)->get();
            foreach ($db_post_tags as $db_post_tag) {
                $db_post_tag_name = PostTag::where('id', $db_post_tag->tag_id)->where('lang_id', $categ->lang_id)->value('tag');
                if (!in_array($db_post_tag_name, $tags_array)) PostTagItem::where('tag_id', $db_post_tag->tag_id)->where('post_id', $request->id)->delete();
            }
        } else PostTagItem::where('post_id', $request->id)->delete();

        // get and update the URL
        $url = Post::get_url($request->id);

        Post::where('id', $request->id)->update([
            'lang_id' => $categ->lang_id ?? null,
            'title' => $request->title,
            'categ_id' => $request->categ_id,
            'slug' => $slug,
            'url' => $url,
            'summary' => $request->summary,
            'tags' => $tags_string ?? null,
            'status' => $request->status,
            'search_terms' => $request->search_terms,
            'meta_title' => $request->meta_title,
            'meta_description' => $request->meta_description,
            'disable_comments' => $request->has('disable_comments') ? 1 : 0,
            'disable_likes' => $request->has('disable_likes') ? 1 : 0,
            'featured' => $request->has('featured') ? 1 : 0,
            'minutes_to_read' => Post::estimated_reading_time($request->id),
            'updated_by_user_id' => Auth::user()->id,
        ]);

        // process tags        
        if ($request->tags and $request->status == 'published') {
            foreach ($tags_array as $tag) {
                PostTag::storeTag($tag, $post->lang_id, $post->id);
            }
        }

        PostTagItem::recountTagItems($post->lang_id);

        // process image        
        if ($request->hasFile('image')) {
            $validator = Validator::make($request->all(), ['image' => 'file|image|max:5120']); // image mime, max 5 MB
            if (!$validator->fails()) {
                $image = Upload::storeImage($request->file('image'), $oldImageCode = $post->image, $data = array('module' => 'posts', 'item_id' => $request->id));
                if ($image) Post::where('id', $request->id)->update(['image' => $image->code]);
            } else $upload_fails = true;
        }

        PostCateg::recount_categ_items($request->categ_id);

        return redirect(route('admin.posts.show', ['id' => $request->id]))->with('success', 'updated')->with('upload_fails', $upload_fails ?? null);
    }


    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $post = Post::find($request->id);
        if (!$post) return redirect(route('admin.posts.index'));

        /*
        // delete main image
        if ($post->image) DriveFile::delete_image($post->image);

        // delete content blocks
        $blocks = Block::where('module', 'posts')->where('content_id', $request->id)->get();
        foreach ($blocks as $block) {
            Block::where('id', $block->id)->delete();
            BlockContent::where('block_id', $block->id)->delete();
        }

        Post::where('id', $request->id)->delete(); // delete post
        PostComment::where('post_id', $request->id)->delete(); // delete comments
        PostLike::where('post_id', $request->id)->delete(); // delete likes
        PostTag::where('post_id', $request->id)->delete(); // delete tags    

        PostCateg::recount_categ_items($post->categ_id);
        */

        Post::where('id', $request->id)->update(['deleted_at' => now()]); // move to recycle bin

        return redirect(route('admin.posts.index'))->with('success', 'deleted');
    }


    /**
     * Remove post main image
     */
    public function delete_main_image(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $post = Post::find($request->id);
        if (!$post) return redirect(route('admin.posts.index'));

        if ($post->image) DriveFile::delete_image($post->image);

        Post::where('id', $request->id)->update(['image' => null]);

        return redirect(route('admin.posts.show', ['id' => $request->id]))->with('success', 'main_image_deleted');
    }


    /**
     * Show form to add content
     */
    public function content(Request $request)
    {
        $post = Post::with('author', 'category')->find($request->id);
        if (!$post) return redirect(route('admin.posts.index'));

        return view('admin.index', [
            'view_file' => 'posts.content',
            'active_menu' => 'website',
            'active_submenu' => 'posts',
            'menu_section' => 'posts',
            'post_menu' => 'content',
            'post' => $post,
        ]);
    }


    /**
     * Update post content   
     */
    public function update_content(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $post = Post::find($request->id);
        if (!$post) return redirect(route('admin.posts.index'));

        $last_pos = Block::where('module', 'posts')->where('content_id', $request->id)->orderByDesc('position')->value('position');
        $position = ($last_pos ?? 0) + 1;

        $block = Block::create([
            'type' => $request->type,
            'module' => 'posts',
            'position' => $position,
            'content_id' => $post->id,
            'created_by_user_id' => Auth::user()->id
        ]);

        Block::regenerate_content_blocks('posts', $request->id);

        Post::where('id', $request->id)->update(['minutes_to_read' => Post::estimated_reading_time($request->id)]);

        return redirect(route('admin.blocks.show', ['id' => $block->id]));
    }



    /**
     * Remove the specified block content
     */
    public function delete_content(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $post = Post::find($request->id);
        if (!$post) return redirect(route('admin.posts.index'));

        Block::regenerate_content_blocks('posts', $request->id);

        BlockContent::where('block_id', $request->block_id)->delete();
        Block::where('id', $request->block_id)->delete();

        Post::where('id', $request->id)->update(['minutes_to_read' => Post::estimated_reading_time($request->id)]);

        return redirect(route('admin.posts.show', ['id' => $request->id]))->with('success', 'deleted');
    }


    /**
     * Ajax sortable
     */
    public function sortable(Request $request)
    {
        $i = 0;
        $content_id = $request->id;
        $records = $request->all();

        foreach ($records['item'] as $key => $value) {

            Block::where('module', 'posts')
                ->where('content_id', $content_id)
                ->where('id', $value)
                ->update([
                    'position' => $i,
                ]);

            $i++;
        }

        Block::regenerate_content_blocks('posts', $content_id);
    }


    /**
     * Config
     */
    public function config()
    {
        $seo_configs = array();
        foreach (Language::get_languages() as $lang) {
            $seo_configs[$lang->id]['lang'] = $lang;
            $seo_configs[$lang->id]['label']  = ConfigLang::get_config($lang->id, 'posts_label');
            $seo_configs[$lang->id]['meta_title']  = ConfigLang::get_config($lang->id, 'posts_meta_title');
            $seo_configs[$lang->id]['meta_description']  = ConfigLang::get_config($lang->id, 'posts_meta_description');
        }

        return view('admin.index', [
            'view_file' => 'posts.config',
            'active_menu' => 'website',
            'active_submenu' => 'posts',
            'menu_section' => 'config',
            'langs' => Language::get_languages(),
            'seo_configs' => $seo_configs,
        ]);
    }


    /**
     * Update the specified resource     
     */
    public function update_config(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        Config::update_config('posts_per_page', $request->posts_per_page);
        Config::update_config('posts_comments_antispam_enabled', $request->posts_comments_antispam_enabled);
        Config::update_config('posts_likes_enabled', $request->posts_likes_enabled);
        Config::update_config('posts_comments_enabled', $request->posts_comments_enabled);
        Config::update_config('posts_comments_fb_enabled', $request->posts_comments_fb_enabled);

        $langs = Language::get_languages();
        foreach ($langs as $lang) {
            ConfigLang::update_config($lang->id, 'posts_label', $request['label_' . $lang->id]);
            ConfigLang::update_config($lang->id, 'posts_meta_title', $request['meta_title_' . $lang->id]);
            ConfigLang::update_config($lang->id, 'posts_meta_description', $request['meta_description_' . $lang->id]);
        }

        return redirect($request->Url())->with('success', 'updated');
    }

}
