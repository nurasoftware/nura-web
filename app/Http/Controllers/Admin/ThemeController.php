<?php

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */


namespace App\Http\Controllers\Admin;

use App\Models\Upload;
use App\Models\Config;
use App\Models\ThemeConfig;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use App\Models\Theme;
use App\Models\Ad;

class ThemeController extends Controller
{

    public function index(Request $request)
    {

        return view('admin.index', [
            'view_file' => 'theme.index',
            'active_menu' => 'theme',
            'menu_section' => 'theme',
        ]);
    }


    /**
     * Update settings
     */
    public function update(Request $request)
    {
        $slug = $request->slug;
        $tab = $request->tab;

        $excepts = array('_token', '_method', 'tab');

        // except files from request
        $filesArray = request()->allFiles();
        if (count($filesArray) > 0) {
            foreach ($filesArray as $key => $fileName) {
                array_push($excepts, $key);
            }
        }

        // request inputs WITHOUT files
        $inputs = $request->except($excepts);
        ThemeConfig::update_config($slug, $inputs);

        // request FILES if exists        
        foreach ($filesArray as $key => $fileName) {
            // process image        
            if ($request->hasFile($key)) {
                $validator = Validator::make($request->all(), [$key => 'file|image|max:5120']); // image mime, max 5 MB
                if (!$validator->fails()) {
                    $image = Upload::storeFile($request->file($key));
                    if ($image) ThemeConfig::update_config($slug, $key, $image->code);
                } else $upload_fails = true;
            }
        }


        // regenerate css file
        //ThemeConfig::generate_template_css($theme = $slug);

        return redirect(route('admin.themes.show', ['slug' => $slug, 'tab' => $tab]))->with('success', 'updated');
    }


    /**
     * Logos config page
     */
    public function logo()
    {
        return view('admin.index', [
            'view_file' => 'theme.config-logo',
            'active_menu' => 'theme',
            'menu_section' => 'logo',
        ]);
    }

    /**
     * Process Template logos
     */
    public function update_logo(Request $request)
    {

        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        // process Main logo image
        if ($request->hasFile('logo')) {

            $validator = Validator::make($request->all(), [
                'logo' => 'mimes:jpeg,jpg,png,gif',
            ]);

            if ($validator->fails()) return redirect($request->Url())->withErrors($validator)->withInput();

            $logo_db = Upload::storeFile($request->file('logo'));
            Config::update_config('logo', $logo_db->file);
        }

        // process auth logo image
        if ($request->hasFile('logo_auth')) {

            $validator = Validator::make($request->all(), [
                'logo_auth' => 'mimes:jpeg,jpg,png,gif',
            ]);

            if ($validator->fails()) return redirect($request->Url())->withErrors($validator)->withInput();

            $logo_db = Upload::storeFile($request->file('logo_auth'));
            Config::update_config('logo_auth', $logo_db->file);
        }


        // pricess favicon image
        if ($request->hasFile('favicon')) {

            $validator = Validator::make($request->all(), ['favicon' => 'mimes:jpeg,jpg,png,gif,ico']);

            if ($validator->fails()) return redirect($request->Url())->withErrors($validator)->withInput();

            $favicon_db = Upload::storeFile($request->file('favicon'));
            Config::update_config('favicon', $favicon_db->file);
        }

        return redirect($request->Url())->with('success', 'updated');
    }


    /**
     * Template tools page
     */
    public function custom_code()
    {
        return view('admin.index', [
            'view_file' => 'theme.config-custom-code',
            'active_menu' => 'theme',
            'menu_section' => 'custom_code',
        ]);
    }

    /**
     * Process temmplate tools page
     */
    public function update_custom_code(Request $request)
    {
        $inputs = $request->except('_token');

        Config::update_config($inputs);

        return redirect($request->Url())->with('success', 'updated');
    }
}
