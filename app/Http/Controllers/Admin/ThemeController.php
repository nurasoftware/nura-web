<?php

namespace App\Http\Controllers\Admin;

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

use App\Models\Upload;
use App\Models\Config;
use App\Models\ConfigLang;
use App\Models\ThemeConfig;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use App\Models\Theme;
use App\Models\ThemeButton;
use App\Models\ThemeStyle;
use App\Models\Language;

class ThemeController extends Controller
{

   
    /**
     * Update settings
     */
    public function index(Request $request)
    {
        $module = $request->module ?? 'global';
        if (!in_array($module, ['global', 'posts', 'contact'])) $module = 'global';       

        if ($module == 'contact') {
            $contact_custom_text = array();
            foreach (Language::get_languages() as $lang) {
                $contact_custom_text[$lang->id]['lang'] = $lang;
                $contact_custom_text[$lang->id]['content']  = ConfigLang::get_config($lang->id, 'contact_custom_text');
            }
        }

        if ($module == 'posts') {
            $posts_custom_text = array();
            foreach (Language::get_languages() as $lang) {
                $posts_custom_title[$lang->id]['lang'] = $lang;
                $posts_custom_title[$lang->id]['content']  = ConfigLang::get_config($lang->id, 'posts_custom_title');

                $posts_custom_text[$lang->id]['lang'] = $lang;
                $posts_custom_text[$lang->id]['content']  = ConfigLang::get_config($lang->id, 'posts_custom_text');
            }
        }

        return view('admin.index', [
            'view_file' => 'theme.edit-' . $module,
            'active_menu' => 'theme',
            'menu_section' => 'theme',
            'module' => $module,
            'fonts' => Theme::theme_fonts(),
            'font_sizes' => Theme::theme_font_sizes(),
            'buttons' => ThemeButton::orderByDesc('is_default')->orderBy('label')->get(),
            'styles' => ThemeStyle::orderBy('label')->get(),

            'search_bar_titles' => $search_bar_titles ?? null,
            'search_bar_subtitles' => $search_bar_subtitles ?? null,

            'contact_custom_text' => $contact_custom_text ?? null,

            'posts_custom_title' => $posts_custom_title ?? null,
            'posts_custom_text' => $posts_custom_text ?? null,

            'langs' => Language::get_languages(),
        ]);
    }


     /**
     * Update settings
     */
    public function update(Request $request)
    {
        $inputs = $request->except(['_token', 'template', 'module', '_method']);
       
        
        if ($request->module == 'contact') {
            $langs = Language::get_languages();
            foreach ($langs as $lang) {
                ConfigLang::update_config($lang->id, 'contact_custom_text', $request['contact_custom_text_' . $lang->id]);
            }
        }

        if ($request->module == 'posts') {
            $langs = Language::get_languages();
            foreach ($langs as $lang) {
                ConfigLang::update_config($lang->id, 'posts_custom_title', $request['posts_custom_title_' . $lang->id]);
                ConfigLang::update_config($lang->id, 'posts_custom_text', $request['posts_custom_text_' . $lang->id]);
            }
        }

        // insert new values        
        Config::update_config($inputs);

        if($request->redirect_to == 'footer') 
            return redirect(route('admin.theme.footer'))->with('success', 'updated');
        else
            return redirect(route('admin.theme', ['module' => $request->module ?? 'global']))->with('success', 'updated');
    }


    /**
     * Logos config page
     */
    public function logo()
    {
        return view('admin.index', [
            'view_file' => 'theme.config-logo',
            'active_menu' => 'theme',
            'menu_section' => 'logo',
        ]);
    }

    /**
     * Process Template logos
     */
    public function update_logo(Request $request)
    {

        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        // process Main logo image
        if ($request->hasFile('logo')) {

            $validator = Validator::make($request->all(), [
                'logo' => 'mimes:jpeg,jpg,png,gif',
            ]);

            if ($validator->fails()) return redirect($request->Url())->withErrors($validator)->withInput();

            $logo_db = Upload::storeFile($request->file('logo'));
            Config::update_config('logo', $logo_db->file);
        }

        // process auth logo image
        if ($request->hasFile('logo_auth')) {

            $validator = Validator::make($request->all(), [
                'logo_auth' => 'mimes:jpeg,jpg,png,gif',
            ]);

            if ($validator->fails()) return redirect($request->Url())->withErrors($validator)->withInput();

            $logo_db = Upload::storeFile($request->file('logo_auth'));
            Config::update_config('logo_auth', $logo_db->file);
        }


        // pricess favicon image
        if ($request->hasFile('favicon')) {

            $validator = Validator::make($request->all(), ['favicon' => 'mimes:jpeg,jpg,png,gif,ico']);

            if ($validator->fails()) return redirect($request->Url())->withErrors($validator)->withInput();

            $favicon_db = Upload::storeFile($request->file('favicon'));
            Config::update_config('favicon', $favicon_db->file);
        }

        return redirect($request->Url())->with('success', 'updated');
    }


    /**
     * Template tools page
     */
    public function custom_code()
    {
        return view('admin.index', [
            'view_file' => 'theme.config-custom-code',
            'active_menu' => 'theme',
            'menu_section' => 'custom_code',
        ]);
    }

    /**
     * Process temmplate tools page
     */
    public function update_custom_code(Request $request)
    {
        $inputs = $request->except('_token');

        Config::update_config($inputs);

        return redirect($request->Url())->with('success', 'updated');
    }
}
