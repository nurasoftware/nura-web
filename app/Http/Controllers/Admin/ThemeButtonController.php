<?php

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use App\Models\Theme;
use App\Models\ThemeButton;

class ThemeButtonController extends Controller
{

    /**
     * Show all resources
     */
    public function index()
    {

        $buttons = ThemeButton::orderByDesc('is_default')->orderBy('label')->paginate(25);

        return view('admin.index', [
            'view_file' => 'theme.buttons',
            'active_menu' => 'theme',
            'active_submenu' => 'theme',
            'menu_section' => 'buttons',
            'buttons' => $buttons,
        ]);
    }


    /**
     * Create resource
     */
    public function store(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $validator = Validator::make($request->all(), [
            'label' => 'required',
        ]);

        if ($validator->fails()) return redirect(route('admin.theme.buttons.index'))->withErrors($validator)->withInput();

        if (ThemeButton::where('label', $request->label)->exists()) return redirect(route('admin.theme.buttons.index'))->with('error', 'duplicate');

        $button = ThemeButton::create([
            'label' => $request->label,
        ]);

        return redirect(route('admin.theme.buttons.show', ['id' => $button->id]))->with('success', 'created');
    }


    /**
     * Show resource
     */
    public function show(Request $request)
    {
        $button = ThemeButton::find($request->id);
        if (!$button) return redirect(route('admin.theme.buttons.index'));

        return view('admin.index', [
            'view_file' => 'theme.button-style',
            'active_menu' => 'theme',
            'active_submenu' => 'theme',
            'menu_section' => 'buttons',
            'button' => $button,
        ]);
    }


    /**
     * Update button style
     */
    public function update(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $button = ThemeButton::find($request->id);
        if (!$button) return redirect(route('admin.theme.buttons.index'));

        if (ThemeButton::where('label', $request->label)->where('id', '!=', $request->id)->exists())
            $label = $button->label;
        else
            $label = $request->label;

        ThemeButton::where('id', $request->id)->update([
            'label' => $label,
            'bg_color' => $request->bg_color,
            'border_color' => $request->border_color,
            'font_color' => $request->font_color,
            'bg_color_hover' => $request->bg_color_hover,
            'border_color_hover' => $request->border_color_hover,
            'font_color_hover' => $request->font_color_hover,
            'shadow' => $request->has('shadow') ? $request->shadow_style : null,
            'rounded' => $request->rounded,
            'font_weight' => $request->font_weight,
            'size' => $request->size,
        ]);

        // regenerate css file
        Theme::generate_styles_css();

        return redirect(route('admin.theme.buttons.show', ['id' => $request->id]))->with('success', 'updated');
    }


    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $button = ThemeButton::find($request->id);
        if (!$button) return redirect(route('admin.theme.buttons.index'));
        if ($button->is_default == 1) return redirect(route('admin.theme.buttons.index'));

        ThemeButton::where('id', $request->id)->delete();

        return redirect(route('admin.theme.buttons.index'))->with('success', 'deleted');
    }
}
