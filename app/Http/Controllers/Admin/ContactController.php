<?php

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Auth;

use App\Models\Contact;
use App\Models\ContactField;
use App\Models\ContactFieldData;
use App\Models\ContactFieldLang;
use App\Models\Config;
use App\Models\Language;

class ContactController extends Controller
{

    /**
     * Display all messages
     */
    public function index(Request $request)
    {
        // check if user can view items
        if ($request->user()->cannot('viewAny', Contact::class)) return redirect(route('admin'))->withErrors('Forbidden');

        $search_terms = $request->search_terms;
        $search_status = $request->search_status;
        $search_replied = $request->search_replied;
        $search_important = $request->search_important;

        $messages = Contact::whereNull('deleted_at');

        if ($search_status == 'unread')
            $messages = $messages->whereNull('read_at');
        if ($search_status == 'read')
            $messages = $messages->whereNotNull('read_at');

        if ($search_replied == 'yes')
            $messages = $messages->whereNotNull('responded_at');
        if ($search_replied == 'no')
            $messages = $messages->whereNull('responded_at');

        if ($search_important == '1')
            $messages = $messages->where('is_important', 1);

        if ($search_terms) $messages = $messages->where(function ($query) use ($search_terms) {
            $query->where('name', 'like', "%$search_terms%")
                ->orWhere('email', 'like', "%$search_terms%")
                ->orWhere('subject', 'like', "%$search_terms%");
        });

        $messages = $messages->orderByDesc('id')->paginate(25);

        $count_messages_unread = Contact::whereNull('read_at')->whereNull('deleted_at')->count();

        return view('admin.index', [
            'view_file' => 'contact.index',
            'active_menu' => 'contact',
            'search_terms' => $search_terms,
            'search_status' => $search_status,
            'search_replied' => $search_replied,
            'search_important' => $search_important,
            'messages' => $messages,
            'count_messages_unread' => $count_messages_unread,
        ]);
    }


    /**
     * Show message     
     */
    public function show(Request $request)
    {
        // check if user can view items
        if ($request->user()->cannot('viewAny', Contact::class)) return redirect(route('admin'))->withErrors('Forbidden');

        $message = Contact::find($request->id);
        if (!$message) return redirect(route('admin.contact'));

        Contact::where('id', $request->id)->update(['read_at' => now()]);

        $fields = ContactFieldData::with('field', 'file')->where('contact_id', $request->id)->get();

        //dd($fields);
        return view('admin.index', [
            'view_file' => 'contact.message',
            'active_menu' => 'contact',
            'message' => $message,
            'fields' => $fields,
        ]);
    }




    /**
     * Move message to trash
     */
    public function to_trash(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        if ($request->user()->cannot('delete', Contact::class)) return redirect(route('admin'))->withErrors('Forbidden');

        Contact::where('id', $request->id)->update(['deleted_at' => now()]);

        return redirect(route('admin.contact', ['pagenum' => $request->pagenum]))->with('success', 'moved_to_trash');
    }


    /**
     * Action for multiple messages selected
     */
    public function multiple_action(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        if ($request->user()->cannot('viewAny', Contact::class)) return redirect(route('admin'))->withErrors('Forbidden');

        if (!$request->messages_checkbox) return redirect(route('admin.contact', ['pagenum' => $request->pagenum]));

        foreach ($request->messages_checkbox as $message_id) {
            if ($request->action == 'read') {
                Contact::where('id', $message_id)->update(['read_at' => now()]);
            }
            if ($request->action == 'unread') {
                Contact::where('id', $message_id)->update(['read_at' => null]);
            }
            if ($request->action == 'important') {
                Contact::where('id', $message_id)->update(['is_important' => 1]);
            }
            if ($request->action == 'trash') {
                if ($request->user()->cannot('delete', Contact::class)) return redirect(route('admin'))->withErrors('Forbidden');
                Contact::where('id', $message_id)->update(['deleted_at' => now()]);
            }
        }

        return redirect(route('admin.contact', ['pagenum' => $request->pagenum]))->with('success', 'updated');
    }



    /**
     * Mark message (important, normal...)
     */
    public function mark(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        if ($request->user()->cannot('viewAny', Contact::class)) return redirect(route('admin'))->withErrors('Forbidden');

        if ($request->action == 'important') Contact::where('id', $request->id)->update(['is_important' => 1]);

        if ($request->action == 'not_important') Contact::where('id', $request->id)->update(['is_important' => 0]);

        if ($request->action == 'spam') Contact::where('id', $request->id)->update(['is_spam' => 1]);

        if ($request->action == 'not_spam') Contact::where('id', $request->id)->update(['is_spam' => 0]);

        return redirect(route('admin.contact.show', ['id' => $request->id]))->with('success', 'updated');
    }


    /**
     * Show form config page
     */
    public function config(Request $request)
    {
        if (!(Auth::user()->role == 'admin')) return redirect('/');

        return view('admin.index', [
            'view_file' => 'contact.config',
            'active_menu' => 'contact',
            'menu_tab' => 'config',
        ]);
    }


    /**
     * Show form custom fields page
     */
    public function fields(Request $request)
    {
        if (!(Auth::user()->role == 'admin')) return redirect('/');

        $fields = ContactField::with('langs')->orderByDesc('active')->orderBy('position')->get();

        //dd($fields);
        return view('admin.index', [
            'view_file' => 'contact.fields',
            'active_menu' => 'contact',
            'menu_tab' => 'fields',
            'fields' => $fields,
        ]);
    }

    /**
     * Show form custom field 
     */
    public function show_field(Request $request)
    {
        if (!(Auth::user()->role == 'admin')) return redirect('/');

        $field = ContactField::with('langs')->where('id', $request->field_id)->first();
        if (!$field) return redirect(route('admin.contact.fields'));

        return view('admin.index', [
            'view_file' => 'contact.update-field',
            'active_menu' => 'contact',
            'menu_tab' => 'fields',
            'field' => $field,
        ]);
    }

    /**
     * Update form config
     */
    public function update_config(Request $request)
    {
        if (!(Auth::user()->role == 'admin')) return redirect('/');

        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $inputs = $request->except(['_token', '_method']);

        Config::update_config($inputs);

        return redirect(route('admin.contact.config'))->with('success', 'updated');
    }

    /**
     * Add form field 
     */
    public function add_field(Request $request)
    {
        if (!(Auth::user()->role == 'admin')) return redirect('/');

        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $last_pos = ContactField::orderByDesc('position')->value('position');
        $position = ($last_pos ?? 0) + 1;

        $field = ContactField::create([
            'type' => $request->type,
            'required' => $request->has('required') ? 1 : 0,
            'active' => $request->has('active') ? 1 : 0,
            'col_md' => $request->col_md ?? 12,
            'position' => $position,
        ]);

        $langs = Language::get_languages();

        foreach ($langs as $lang) {
            ContactFieldLang::create([
                'field_id' => $field->id,
                'lang_id' => $lang->id,
                'label' => $request['label_' . $lang->id],
                'info' => $request['info_' . $lang->id],
                'dropdowns' => $request['dropdowns_' . $lang->id] ?? null
            ]);
        }

        return redirect(route('admin.contact.fields'))->with('success', 'created');
    }


    /**
     * Update form field 
     */
    public function update_field(Request $request)
    {
        if (!(Auth::user()->role == 'admin')) return redirect('/');

        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        ContactField::where('id', $request->field_id)->update([
            'type' => $request->type,
            'required' => $request->has('required') ? 1 : 0,
            'active' => $request->has('active') ? 1 : 0,
            'col_md' => $request->col_md ?? 12,
        ]);

        $langs = Language::get_languages();

        foreach ($langs as $lang) {
            ContactFieldLang::updateOrCreate(
                ['field_id' => $request->field_id, 'lang_id' => $lang->id],
                [
                    'label' => $request['label_' . $lang->id],
                    'info' => $request['info_' . $lang->id],
                    'dropdowns' => $request['dropdowns_' . $lang->id] ?? null
                ]
            );
        }

        return redirect(route('admin.contact.fields'))->with('success', 'updated');
    }


    /**
     * Remove form field
     */
    public function destroy_field(Request $request)
    {
        if (!(Auth::user()->role == 'admin')) return redirect('/');

        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        ContactFieldLang::where('field_id', $request->field_id)->delete();
        ContactFieldData::where('field_id', $request->field_id)->delete();
        ContactField::where('id', $request->field_id)->delete();

        return redirect(route('admin.contact.fields'))->with('success', 'deleted');
    }


    /**
     * Ajax sortable
     */
    public function sortable_fields(Request $request)
    {
        $i = 0;
        $records = $request->all();

        foreach ($records['item'] as $key => $value) {
            ContactField::where('id', $value)->update(['position' => $i]);
            $i++;
        }
    }
}
