<?php

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */


namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Auth;
use App\Models\Block;
use App\Models\Theme;
use App\Models\ThemeButton;
use App\Models\ThemeStyle;
use App\Models\Language;
use DB;

class BlockController extends Controller
{

    /**
     * Show form to edit resource     
     */
    public function show(Request $request)
    {

        $block = Block::find($request->id);
        if (!$block) return redirect(route('admin'));

        $content_langs = Language::with(['block_content' => function ($query) use ($block) {
            $query->where(['block_id' => $block->id]);
        }])
            ->where('status', '!=', 'disabled')
            ->orderByDesc('is_default')
            ->orderBy('status')
            ->get();

        if ($request->referer) $referer = $request->referer;
        else $referer = request()->headers->get('referer');

        return view('admin.index', [
            'view_file' => 'blocks.update-' . $block->type,
            'active_menu' => 'website',
            'active_submenu' => $block->module,
            'block' => $block,
            'block_module' => $block->module,
            'content_langs' => $content_langs,
            'referer' => $referer,
            'font_sizes' => Theme::theme_font_sizes(),
            'buttons' => ThemeButton::orderByDesc('is_default')->orderBy('label')->get(),
            'styles' => ThemeStyle::orderBy('label')->get(),
        ]);
    }


    /**
     * Update the specified resource     
     */
    public function update(Request $request)
    {

        $id = $request->id;
        $block_type = $request->type;
        $referer = $request->referer;

        $block_module = Block::where('id', $id)->value('module');

        $inputs = $request->except('_token');

        Block::update_block($id, $block_type, $request, 'blocks');

        if ($inputs['hide'] ?? null) $hide = 1;
        Block::where('id', $id)->update(['label' =>  $inputs['label'] ?? null, 'updated_at' => now(), 'updated_by_user_id' =>  Auth::user()->id, 'hide' => $hide ?? 0]);

        // regenerate content blocks and add blocks in module table (for database performance)
        if ($block_module == 'pages') {
            $content_id = Block::where('id', $id)->value('content_id');
            Block::regenerate_content_blocks($block_module, $content_id);
        }

        if (($inputs['submit_return_to_block'] ?? null) == 'block') return redirect(route('admin.blocks.show', ['id' => $id, 'referer' => $referer ?? null]))->with('success', 'updated');
        elseif ($referer) return redirect($referer)->with('success', 'updated');
        else return redirect(route('admin.blocks'))->with('success', 'updated');
    }


    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {

        $id = $request->id;

        $block = Block::find($id);

        // regenerate content blocks and add blocks in module table (for database performance)
        Block::regenerate_content_blocks($block->module, $block->content_id);

        Block::where('id', $id)->delete();

        return redirect(route('admin.blocks'))->with('success', 'deleted');
    }
}
