<?php

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

namespace App\Http\Controllers\Admin;

use App\Models\ConfigLang;
use App\Models\Locale;
use App\Models\Language;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\ThemeMenu;
use Illuminate\Support\Facades\Validator;

class LangController extends Controller
{

    /**
     * Display all resources
     */
    public function index()
    {
        $langs = Language::orderByDesc('is_default')->orderBy('status')->paginate(25);        

        return view('admin.index', [
            'view_file' => 'config.languages',
            'active_menu' => 'config',
            'active_submenu' => 'config',
            'active_tab' => 'languages',
            'langs' => $langs,
            'locales_array' => Locale::locales_array(),
            'lang_codes_array' => Locale::lang_codes_array(),
            'timezones_array' => Locale::generate_timezone_list(),
        ]);
    }


    /**
     * Create new resource
     */
    public function store(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $validator = Validator::make($request->all(), [
            'name' => 'required|max:25',
            'code' => 'required',
            'locale' => 'required',
            'timezone' => 'required',
            'dir' => 'required|in:ltr,rtl'
        ]);

        if ($validator->fails()) return redirect(route('admin.languages.index'))->withErrors($validator)->withInput();

        if (Language::where('name', $request->name)->exists()) return redirect(route('admin.languages.index'))->with('error', 'duplicate');
        if (Language::where('code', $request->code)->exists()) return redirect(route('admin.languages.index'))->with('error', 'duplicate');

        // only one language can be default
        if ($request->has('is_default')) Language::where('is_default', 1)->update(['is_default' => 0]);

        $lang = Language::create([
            'name' => $request->name,
            'code' => $request->code,
            'locale' => $request->locale,
            'is_default' => $request->has('is_default') ? 1 : 0,
            'status' => $request->status,
            'timezone' => $request->timezone ?? 'Europe/London',
            'dir' => $request->dir ?? 'ltr',
        ]);

        ConfigLang::update_config($lang->id, 'site_label', $request->site_label ?? config('app.name'));        

        ThemeMenu::generate_menu_links();

        return redirect(route('admin.languages.index'))->with('success', 'created');
    }


    /**
     * Update the specified resource     
     */
    public function update(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $lang = Language::find($request->id);
        if (!$lang) return redirect(route('admin.languages.index'));

        $validator = Validator::make($request->all(), [
            'name' => 'required|max:25',
            'code' => 'required',
            'locale' => 'required',
            'timezone' => 'required',
            'dir' => 'required|in:ltr,rtl'
        ]);

        if ($validator->fails()) return redirect(route('admin.languages.index'))->withErrors($validator)->withInput();

        if (Language::where('name', $request->name)->where('id', '!=', $request->id)->exists()) return redirect(route('admin.languages.index'))->with('error', 'duplicate');
        if (Language::where('code', $request->code)->where('id', '!=', $request->id)->exists()) return redirect(route('admin.languages.index'))->with('error', 'duplicate');

        // only one language can be default
        if ($request->has('is_default')) Language::where('is_default', 1)->update(['is_default' => 0]);

        Language::where('id', $request->id)->update([
            'name' => $request->name,
            'code' => $request->code,
            'locale' => $request->locale,
            'is_default' => $request->has('is_default') ? 1 : 0,
            'status' => $request->status,
            'timezone' => $request->timezone ?? 'Europe/London',
            'dir' => $request->dir ?? 'ltr',
        ]);

        ConfigLang::update_config($request->id, 'site_label', $request->site_label ?? config('app.name'));        

        // regenerate menu links for each language and store in cache config
        ThemeMenu::generate_menu_links();

        return redirect(route('admin.languages.index'))->with('success', 'updated');
    }


    /**
     * Remove the specified resource
     */
    public function destroy(Request $request)
    {
        // disable action in demo mode:
        if (config('app.demo_mode')) return redirect(route('admin'))->with('error', 'demo');

        $lang = Language::find($request->id);
        if (!$lang) return redirect(route('admin.languages.index'));

        if (Language::where('id', $request->id)->value('is_default') == 1) return redirect(route('admin.languages.index'))->with('error', 'default');

        Language::where('id', $request->id)->delete();

        return redirect(route('admin.languages.index'))->with('success', 'deleted');
    }

}
