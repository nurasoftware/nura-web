<?php

namespace App\Http\Controllers\Web;

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Cookie;
use App\Models\Post;
use App\Models\PostCateg;
use App\Models\PostTag;
use App\Models\PostTagItem;
use App\Models\Config;
use App\Models\Language;
use Auth;

class PostController extends Controller
{

    /**
     * All posts
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        if (((Config::config()->module_posts ?? null) != 'active')) return redirect(route('home'));

        $posts = Post::with('author', 'category')->whereNull('deleted_at')
            ->whereHas('category', function ($query) {
                $query->where('active', 1);
            })
            ->where('lang_id', Language::get_active_language()->id ?? null)
            ->where('status', 'published')
            ->orderByDesc('featured')->orderByDesc('id')->paginate(Config::config()->posts_per_page ?? 12);

        $categories = PostCateg::withCount('posts')->where('active', 1)->where('lang_id', Language::get_active_language()->id)->limit(200)->get();

        // layout
        if (Config::config()->tpl_posts_home_layout_id ?? null) $layout = TemplateLayout::find(Config::config()->tpl_posts_home_layout_id);

        return view('web.posts', [
            'posts' => $posts,
            'categories' => $categories,

            'layout' => $layout ?? null,
            'layout_top' => $layout->top ?? null,
            'layout_bottom' => $layout->bottom ?? null,
            'layout_sidebar' => $layout->sidebar ?? null,
        ]);
    }

    /**
     * Al posts from a category slug
     *
     * @return \Illuminate\Http\Response
     */
    public function categ(Request $request)
    {
        if (((Config::config()->module_posts ?? null) != 'active')) return redirect(route('home'));

        $categ_slug = $request->categ_slug;

        $categ = PostCateg::where('slug', $categ_slug)->where('active', 1)->where('lang_id', Language::get_active_language()->id)->first();
        if (!$categ) return redirect(route('posts'));

        $categ_tree_ids = $categ->tree_ids ?? null;
        if ($categ_tree_ids) $categ_tree_ids_array = explode(',', $categ_tree_ids);

        $posts = Post::with('author', 'category')->whereNull('deleted_at')
            ->whereHas('category', function ($query) {
                $query->where('active', 1);
            })
            ->where('status', 'published')
            ->whereIn('posts.categ_id', $categ_tree_ids_array)
            ->orderByDesc('featured')
            ->orderByDesc('posts.id')
            ->paginate(Config::config()->posts_per_page ?? 12);

        // layout
        if (Config::config()->tpl_posts_categ_layout_id ?? null) $layout = TemplateLayout::find(Config::config()->tpl_posts_categ_layout_id);

        return view('web.posts-categ', [
            'posts' => $posts,
            'categ' => $categ,

            'layout' => $layout ?? null,
            'layout_top' => $layout->top ?? null,
            'layout_bottom' => $layout->bottom ?? null,
            'layout_sidebar' => $layout->sidebar ?? null,
        ]);
    }


    /**
     *  Show item
     */
    public function show(Request $request)
    {
        if (((Config::config()->module_posts ?? null) != 'active')) return redirect(route('home'));

        $slug = $request->slug;
        $categ_slug = $request->categ_slug;

        if (!$slug || !$categ_slug) return redirect(route('posts'));

        $post = Post::with('author', 'category')->whereNull('deleted_at')
            ->whereHas('category', function ($query) use ($categ_slug) {
                $query->where('active', 1)->where('lang_id', Language::get_active_language()->id)->where('slug', $categ_slug);
            })
            ->where('status', 'published')
            ->where('slug', $slug)
            ->where('lang_id', Language::get_active_language()->id)
            ->first();

        if (!$post) return redirect(route('posts'));

        if ($post->blocks) $content_blocks = unserialize($post->blocks);

        $categ = PostCateg::where('id', $post->categ_id)->where('active', 1)->first();
        if (!$categ) return redirect(route('posts'));

        $comments = PostComment::with('author')->where('post_id', $post->id)->where('status', 'active');

        $tags = PostTagItem::with('tag')->where('post_id', $post->id)->get();

        if ((Config::config()->posts_comments_order ?? null) == 'old')
            $comments = $comments->orderBy('id', 'asc');
        else
            $comments = $comments->orderBy('id', 'desc');

        $comments = $comments->paginate(Config::config()->posts_comments_per_page ?? 20);

        // likes enabled
        if ((Config::config()->posts_likes_disabled ?? null) == 0 && $post->disable_likes != 1) $likes_enabled = true;
        else $likes_enabled = false;

        $related_posts = Post::where('id', '!=', $post->id)
            ->whereNull('deleted_at')
            ->where('status', 'published')
            ->orderByDesc('featured')
            ->orderByDesc('id')
            ->where('categ_id', $post->categ_id)
            ->where('lang_id', Language::get_active_language()->id)
            ->limit(Config::config()->posts_per_page ?? 12)
            ->get();

        // update hits
        Post::where('id', $post->id)->increment('hits');

        // layout
        if (Config::config()->tpl_posts_post_layout_id ?? null) $layout = TemplateLayout::find(Config::config()->tpl_posts_post_layout_id);

        return view('web.post', [
            'post' => $post,
            'content_blocks' => $content_blocks ?? array(),
            'related_posts' => $related_posts,
            'likes_enabled' => $likes_enabled,
            'comments' => $comments,
            'tags' => $tags,

            'layout' => $layout ?? null,
            'layout_top' => $layout->top ?? null,
            'layout_bottom' => $layout->bottom ?? null,
            'layout_sidebar' => $layout->sidebar ?? null,
        ]);
    }



    /**
     * Process comment
     */
    public function comment(Request $request)
    {
        if (((Config::config()->module_posts ?? null) != 'active')) return redirect(route('home'));

        $categ_slug = $request->categ_slug;
        $slug = $request->slug;
        $id = $request->id;
        if (!$categ_slug || !$slug) return redirect(route('home'));

        $inputs = $request->all(); // retrieve all of the input data as an array      

        $post = Post::find($id);
        if (!$post) return redirect(route('home'));

        if ($post->status != 'published') return redirect(route('posts'));

        // check if global comments is disabled
        if (Config::config()->posts_comments_disabled ?? null) return redirect(route('post', ['lang' => $request->lang, 'categ_slug' => $categ_slug, 'slug' => $slug]) . '#comments');

        // check if comment is disabled
        if ($post->disable_comments ?? null) return redirect(route('post', ['lang' => $request->lang, 'categ_slug' => $categ_slug, 'slug' => $slug]) . '#comments');

        // check if login is required
        if ((Config::config()->posts_comments_require_login ?? null) && !Auth::check()) return redirect(route('post', ['lang' => $request->lang, 'categ_slug' => $categ_slug, 'slug' => $slug]) . '#comments')->with('error', 'login_required');

        // check antispam 
        if (Config::config()->posts_comments_antispam_enabled ?? null) {
            // Build POST request:
            $recaptcha_url = 'https://www.google.com/recaptcha/api/siteverify';
            $recaptcha_secret = Config::config()->google_recaptcha_secret_key ?? null;
            $recaptcha_response = $request->recaptcha_response;

            // Make and decode POST request:
            $recaptcha = file_get_contents($recaptcha_url . '?secret=' . $recaptcha_secret . '&response=' . $recaptcha_response);
            $recaptcha = json_decode($recaptcha);

            // Take action based on the score returned:
            if ($recaptcha->success) {
                if ($recaptcha->score < 0.5) return redirect(route('post', ['lang' => $request->lang, 'categ_slug' => $categ_slug, 'slug' => $slug]) . '#comments')->with('error', 'recaptcha_error');
            } else return redirect(route('post', ['lang' => $request->lang, 'categ_slug' => $categ_slug, 'slug' => $slug]) . '#comments')->with('error', 'recaptcha_error');
        }

        $validator = Validator::make($request->all(), [
            'name' => 'required',
            'comment' => 'required',
        ]);

        if ($validator->fails()) {
            return redirect(route('post', ['lang' => $request->lang, 'categ_slug' => $categ_slug, 'slug' => $slug]))
                ->withErrors($validator)
                ->withInput();
        }

        if ((Config::config()->posts_comments_require_manual_approve ?? null)  && !Auth::check())
            $status = 'pending';
        else
            $status = 'active';

        PostComment::create([
            'post_id' => $request->id,
            'name' => $request->name,
            'comment' => $request->comment,
            'status' => $status,
            'ip' => $request->ip(),
            'user_id' => Auth::user()->id ?? null
        ]);

        // recount comments
        Post::recount_post_comments($post->id);

        if ($status == 'active') $msg = 'comment_added';
        else $msg = 'comment_pending';

        return redirect(route('post', ['lang' => $request->lang, 'categ_slug' => $categ_slug, 'slug' => $slug]) . '#comments')->with('success', $msg);
    }


    /**
     * Process like
     */
    public function like(Request $request)
    {
        if (((Config::config()->module_posts ?? null) != 'active')) return redirect(route('home'));

        $post_id = $request->post_id;

        // check if global rating is disabled
        if (!(Config::config()->posts_likes_enabled ?? null)) return response('like_disabled');

        // check if like is disabled
        $post = Post::find($post_id);
        if (!$post) return response('invalid_content');
        if ($post->disable_likes == 1) return response('like_disabled');

        $cookie = Cookie::get('post_like_' . $post_id);

        if (!$cookie) {
            PostLike::create([
                'post_id' => $post_id,
                'user_id' => Auth::user()->id ?? null,
                'created_at' =>  now(),
                'ip' => $request->ip(),
            ]);

            // recount likes
            Post::recount_post_likes($post_id);

            return response('liked')->cookie(
                'post_like_' . $post_id,
                1,
                60 * 24 * 30,
                '/'
            );
        } // end if not exist cookie
        else {
            return response('already_liked');
        }
    }



    /**
     * Search results
     */
    public function search(Request $request)
    {
        if (((Config::config()->module_posts ?? null) != 'active')) return redirect(route('home'));

        $s = $request->s;
        $lang = $request->lang;

        $posts = Post::with('author', 'category')
            ->whereNull('deleted_at')
            ->where('status', 'published')
            ->where(function ($query) use ($s) {
                $query->where('title', 'like', "%$s%")
                    ->orWhere('search_terms', 'like', "%$s%")
                    ->orWhere('tags', 'like', "%$s%");
            });

        if (!$lang) {
            $posts = $posts->where('posts.lang_id', Language::get_default_language()->id);
        } else {
            $posts = $posts->where('posts.lang_id', Language::get_active_language()->id);
        }

        $posts = $posts->orderBy('posts.featured', 'desc')
            ->orderBy('posts.id', 'desc')
            ->paginate(Config::config()->posts_per_page ?? 12);

        return view('web.posts-search', [
            'posts' => $posts,
            's' => $s,
        ]);
    }


    /**
     * Al posts from a tag slug
     *
     * @return \Illuminate\Http\Response
     */
    public function tag(Request $request)
    {
        if (((Config::config()->module_posts ?? null) != 'active')) return redirect(route('home'));

        $slug = $request->slug;

        $tag = PostTag::where('slug', $slug)->where('lang_id', Language::get_active_language()->id)->first();
        if (!$tag) return redirect(route('posts'));

        $posts = PostTagItem::with('post')
            ->whereHas('post', function ($query) {
                $query->where('status', 'published')->whereNull('deleted_at');
            })
            ->where('tag_id', $tag->id)
            ->where('lang_id', Language::get_active_language()->id)
            ->paginate(Config::config()->posts_per_page ?? 12);

        return view('web.posts-tag', [
            'tag' => $tag,
            'posts' => $posts,
        ]);
    }
}
