<?php

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Page extends Model
{
    use SoftDeletes;

    protected $fillable = [
        'parent_id',
        'user_id',
        'active',
        'blocks',
        'hits',
        'is_homepage',
        'deleted_at',
    ];

    //protected $appends = ['url', 'meta_title', 'meta_description'];

    protected $table = 'pages';

    public function author()
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    public function parent()
    {
        return $this->belongsTo(Page::class, 'parent_id')->with('content');
    }

    public function content()
    {
        return $this->hasOne(PageContent::class, 'page_id');
    }

    public function default_language_content()
    {
        return $this->hasOne(PageContent::class, 'page_id')->where('lang_id', Language::get_default_language()->id);
    }

    public function active_language_content()
    {
        return $this->hasOne(PageContent::class, 'page_id')->where('lang_id', Language::get_active_language()->id);
    }

    public function language_translation()
    {
        return $this->hasOne(PageContent::class, 'page_id');
    }

    public function translations()
    {
        return $this->hasMany(PageContent::class, 'page_id');
    }

    public function translation()
    {
        return $this->default_language_content();
    }
}
