<?php

namespace App\Models;

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <contact@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

use Illuminate\Database\Eloquent\Model;
use App\Models\BlockContent;
use Illuminate\Database\Eloquent\SoftDeletes;

class Post extends Model
{

    use SoftDeletes;

    protected $fillable = [
        'lang_id',
        'title',
        'slug',
        'url',
        'image',
        'user_id',
        'categ_id',
        'status',
        'summary',
        'content',
        'tags',
        'featured',
        'meta_title',
        'meta_description',
        'updated_by_user_id',
        'hits',
        'minutes_to_read',
        'search_terms',
        'blocks',
        'deleted_at'        
    ];

    protected $table = 'posts';

    public function author()
    {
        return $this->belongsTo(User::class, 'user_id');
    }  

    public static function get_url($post_id)
    {
        $post = Post::find($post_id);
        if (!$post) return '#';

        $categ = PostCateg::find($post->categ_id);
        if (!$categ) return '#';

        if ($post->lang_id == Language::get_default_language()->id)
            $url = route('post', ['categ_slug' => $categ->slug, 'slug' => $post->slug]);
        else {
            $lang = Language::where('id', $post->lang_id)->first();
            $url = route('locale.post', ['categ_slug' => $categ->slug, 'slug' => $post->slug, 'locale' => $lang->code]);
        }

        return $url;
    }

    public function language()
    {
        return $this->belongsTo(Language::class, 'lang_id');
    }

    public function category()
    {
        return $this->belongsTo(PostCateg::class, 'categ_id');
    }
    
    public function blocks()
    {
        return $this->hasMany(BlockContent::class, 'post_id');
    }
    
    public static function estimated_reading_time($post_id)
    {
        $post = Post::find($post_id);
        if (!$post) return null;

        $words = 0;

        if (!$post->blocks) return 1;

        $blocks = unserialize($post->blocks);

        foreach ($blocks as $block) {
            if ($block['type'] == 'editor' || $block['type'] == 'accordion') {
                $block_content = BlockContent::where('block_id', $block['id'])->where('lang_id', Language::get_active_language()->id)->value('content');
                if ($block_content) {
                    $block_data = @unserialize($block_content);
                    if ($block_data !== false) $words_block = str_word_count(strip_tags(unserialize($block_content)));
                    else $words_block = str_word_count(strip_tags($block_content));
                } else $words_block = 0;

                $words = $words + $words_block;
            }
        }

        $minutes = (int)($words / 120);
        $seconds = (int)($words % 120 / (120 / 60));

        if ($minutes < 1) $minutes = 1;

        return $minutes;
    }
}
