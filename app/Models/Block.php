<?php

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */


namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Validator;
use DB;

class Block extends Model
{

    protected $fillable = [
        'type',
        'label',
        'content',
        'header',
        'extra',
        'module',
        'content_id',
        'template_id',
        'position',
        'hide',
        'created_by_user_id',
        'updated_by_user_id',
    ];

    protected $table = 'blocks';


    /**
     * 
     * @return \Illuminate\Database\Eloquent\Relations\hasOne
     */
    public function content()
    {
        return $this->hasOne(BlockContent::class, 'block_id');
    }

    /**
     * Regenerate content blocks
     *
     * @return null
     */
    public static function regenerate_content_blocks($module, $content_id)
    {
        if ($module == 'posts') $item = Post::find($content_id);
        if ($module == 'pages') $item = Page::find($content_id);

        if (!$item) return null;

        $blocks = Block::where('module', $module)
            ->where('content_id', $content_id)
            ->where('hide', 0)
            ->orderBy('position')
            ->select('id', 'type', 'extra')
            ->get()->toArray();

        if ($module == 'posts') Post::where('id', $content_id)->update(['blocks' => serialize($blocks)]);
        if ($module == 'pages') Page::where('id', $content_id)->update(['blocks' => serialize($blocks)]);

        return;
    }


    public static function update_block($id, $type, $request, $destination)
    {
        $inputs = $request->except('_token');

        if ($destination == 'blocks') {
            $block = Block::where('id', $id);
        }
        if ($destination == 'footer') {
            $block = FooterBlock::where('id', $id);
            $table_content = 'theme_footer_blocks_content';
        }

        if ($destination == 'blocks') $block_module = Block::where('id', $id)->value('module');

        // Extra content TEXT            
        if ($type == 'text') {
            $block_extra = array('style_id' => null);
            if ($inputs['use_custom_style'] ?? null) $block_extra['style_id'] = $inputs['style_id'];

            $block->update(['extra' => serialize($block_extra)]);
        }

        // Extra content EDITOR            
        if ($type == 'editor') {
            $block_extra = array('style_id' => null);
            if ($inputs['use_custom_style'] ?? null) $block_extra['style_id'] = $inputs['style_id'];
            $block->update(['extra' => serialize($block_extra)]);
        }


        // Extra content IMAGE      
        if ($type == 'image') {
            $block_extra = array('style_id' => null, 'shadow' => null, 'rounded' => null);
            if ($inputs['shadow'] ?? null) $block_extra['shadow'] = $inputs['shadow'];
            if ($inputs['rounded'] ?? null) $block_extra['rounded'] = $inputs['rounded'];
            if ($inputs['use_custom_style'] ?? null) $block_extra['style_id'] = $inputs['style_id'];
            $block->update(['extra' => serialize($block_extra)]);
        }


        // Extra content GALLERY        
        if ($type == 'gallery') {
            $block_extra = array('style_id' => null, 'shadow' => null, 'rounded' => null, 'cols' => null, 'masonry_layout' => null, 'masonry_cols' => null, 'masonry_gutter' => null);
            if ($inputs['shadow'] ?? null) $block_extra['shadow'] = $inputs['shadow'];
            if ($inputs['rounded'] ?? null) $block_extra['rounded'] = $inputs['rounded'];
            if ($inputs['use_custom_style'] ?? null) $block_extra['style_id'] = $inputs['style_id'];
            if ($inputs['cols'] ?? null) $block_extra['cols'] = $inputs['cols'] ?? 4;
            if ($inputs['masonry_layout'] ?? null) $block_extra['masonry_layout'] = $inputs['masonry_layout'];
            if ($inputs['masonry_cols'] ?? null) $block_extra['masonry_cols'] = $inputs['masonry_cols'] ?? 4;
            if ($inputs['masonry_gutter'] ?? null) $block_extra['masonry_gutter'] = $inputs['masonry_gutter'] ?? 0;
            $block->update(['extra' => serialize($block_extra)]);
        }


        // Extra content VIDEO               
        if ($type == 'video') {
            $block_extra = array('style_id' => null, 'full_width_responsive' => null);
            if ($inputs['use_custom_style'] ?? null) $block_extra['style_id'] = $inputs['style_id'];
            if ($inputs['full_width_responsive'] ?? null) $block_extra['full_width_responsive'] = $inputs['full_width_responsive'];
            $block->update(['extra' => serialize($block_extra)]);
        }


        // Extra content CARDS        
        if ($type == 'card') {
            $block_extra = array('style_id' => null, 'border_color' => null, 'no_border_radius' => null, 'bg_color' => null, 'bg_color_hover' => null, 'same_height' => null, 'horizontal' => null, 'img_full_width' => null, 'shadow' => null, 'cols' => null);
            if ($inputs['shadow'] ?? null) $block_extra['shadow'] = $inputs['shadow'];
            if ($inputs['no_border_radius'] ?? null) $block_extra['no_border_radius'] = $inputs['no_border_radius'];
            if ($inputs['same_height'] ?? null) $block_extra['same_height'] = $inputs['same_height'];
            if ($inputs['horizontal'] ?? null) $block_extra['horizontal'] = $inputs['horizontal'];
            if ($inputs['img_full_width'] ?? null) $block_extra['img_full_width'] = $inputs['img_full_width'];
            if ($inputs['use_border'] ?? null) $block_extra['border_color'] = $inputs['border_color'];
            if ($inputs['use_bg_color_hover'] ?? null) $block_extra['bg_color_hover'] = $inputs['bg_color_hover'];
            if ($inputs['bg_color'] ?? null) $block_extra['bg_color'] = $inputs['bg_color'];
            if ($inputs['use_custom_style'] ?? null) $block_extra['style_id'] = $inputs['style_id'];
            if ($inputs['cols'] ?? null) $block_extra['cols'] = $inputs['cols'] ?? 4;
            if ($inputs['icon_size'] ?? null) $block_extra['icon_size'] = $inputs['icon_size'] ?? '2em';
            if ($inputs['link_location'] ?? null) $block_extra['link_location'] = $inputs['link_location'];
            if ($inputs['link_btn_id'] ?? null) $block_extra['link_btn_id'] = $inputs['link_btn_id'];
            if ($inputs['link_btn_size'] ?? null) $block_extra['link_btn_size'] = $inputs['link_btn_size'];
            if ($inputs['link_btn_width'] ?? null) $block_extra['link_btn_width'] = $inputs['link_btn_width'];
            $block->update(['extra' => serialize($block_extra)]);
        }


        // Extra content HERO            
        if ($type == 'hero') {
            $block_extra = array('style_id' => null, 'image_position' => $inputs['image_position'], 'image' => $inputs['existing_image'] ?? null, 'cover_fixed' => null, 'cover_dark' => null, 'img_container_width' => $inputs['img_container_width'] ?? null, 'img_col' => $inputs['img_col'] ?? null, 'img_click' => null, 'text_align' => $inputs['text_align'] ?? 'left', 'padding-y' => $inputs['padding-y'] ?? null);

            if ($inputs['use_image'] ?? null) $block_extra['use_image'] = $inputs['use_image'];
            if ($inputs['use_custom_style'] ?? null) $block_extra['style_id'] = $inputs['style_id'];
            if ($inputs['shadow'] ?? null) $block_extra['shadow'] = $inputs['shadow'];
            if ($inputs['shadow_title'] ?? null) $block_extra['shadow_title'] = $inputs['shadow_title'];
            if ($inputs['shadow_content'] ?? null) $block_extra['shadow_content'] = $inputs['shadow_content'];
            if ($inputs['cover_fixed'] ?? null) $block_extra['cover_fixed'] = $inputs['cover_fixed'];
            if ($inputs['cover_dark'] ?? null) $block_extra['cover_dark'] = $inputs['cover_dark'];
            if ($inputs['img_click'] ?? null) $block_extra['img_click'] = $inputs['img_click'];

            if ($request->hasFile('image')) {
                $validator = Validator::make($request->all(), ['image' => 'file|image|max:5120']); // image mime, max 5 MB
                if (!$validator->fails()) {
                    $image = Upload::storeImage($request->file('image'), $oldImageCode = $inputs["existing_image"] ?? null, $data = array('module' => $block_module, 'item_id' => null, 'extra_item_id' => null));
                    $block_extra['image'] = $image->code;
                }
            }

            $block->update(['extra' => serialize($block_extra)]);
        }


        // Extra content SLIDER
        if ($type == 'slider') {
            $block_extra = array('style_id' => null, 'bg_style' => $inputs['bg_style'], 'bg_image' => $request['existing_bg_image'] ?? null, 'cover_fixed' => null, 'cover_dark' => null, 'delay_seconds' => $inputs['delay_seconds']);
            if ($inputs['cover_fixed'] ?? null) $block_extra['cover_fixed'] = $inputs['cover_fixed'];
            if ($inputs['cover_dark'] ?? null) $block_extra['cover_dark'] = $inputs['cover_dark'];
            if ($inputs['shadow_title'] ?? null) $block_extra['shadow_title'] = $inputs['shadow_title'];
            if ($inputs['shadow_content'] ?? null) $block_extra['shadow_content'] = $inputs['shadow_content'];
            if ($inputs['use_custom_style'] ?? null) $block_extra['style_id'] = $inputs['style_id'];
            if ($inputs['link_btn_id'] ?? null) $block_extra['link_btn_id'] = $inputs['link_btn_id'];

            $image = null;

            // delete image (if checkbox is checked)
            if ($request->has('delete_bg_image')) {
                $file_code_to_delete = $inputs['delete_bg_image_file_code'];
                delete_image($file_code_to_delete);
                $block_extra['bg_image'] = null;
            }

            if ($request->hasFile('bg_image')) {
                $validator = Validator::make($request->all(), ['bg_image' => 'file|image|max:5120']); // image mime, max 5 MB
                if (!$validator->fails()) {
                    $img = Upload::storeImage($request->file('bg_image'), $oldImageCode = $request['existing_bg_image'] ?? null, $data = array('module' => $block_module, 'item_id' => null, 'extra_item_id' => null));
                    $image = $img->code;
                }
            } else $image = $request['existing_bg_image'] ?? null;

            $block_extra['bg_image'] = $image;

            $block->update(['extra' => serialize($block_extra)]);
        }


        // CUSTOM
        if ($type == 'custom') {
            $block_extra = array('bg_color' => null);
            if ($inputs['use_custom_bg'] ?? null) $block_extra['bg_color'] = $inputs['bg_color'];
            $block->update(['extra' => serialize($block_extra)]);
        }


        // Extra content ACCORDION            
        if ($type == 'accordion') {
            $block_extra = array('bg_color' => null, 'title_size' => $inputs['title_size'], 'remove_border' => $inputs['remove_border'], 'title_color' => $inputs['title_color'], 'title_bg_color' => $inputs['title_bg_color'], 'font_color' => $inputs['font_color'] ?? null, 'collapse_first_item' => $inputs['collapse_first_item'] ?? null);
            if ($inputs['use_custom_font_color'] ?? null) $block_extra['use_custom_font_color'] = $inputs['use_custom_font_color'];
            if ($inputs['use_custom_bg'] ?? null) $block_extra['bg_color'] = $inputs['bg_color'];
            $block->update(['extra' => serialize($block_extra)]);
        }


        // Extra content ALERT            
        if ($type == 'alert') {
            $block_extra = array('style_id' => null, 'type' => null);
            if ($inputs['alert_type'] ?? null) $block_extra['type'] = $inputs['alert_type'];
            if ($inputs['use_custom_style'] ?? null) $block_extra['style_id'] = $inputs['style_id'];
            $block->update(['extra' => serialize($block_extra)]);
        }


        // Extra content MAPS       
        if ($type == 'map') {
            $block_extra = array('height' => $inputs['height'] ?? 400, 'zoom' => $inputs['zoom'] ?? 16, 'address' => $inputs['address']);
            $block->update(['extra' => serialize($block_extra)]);
        }


        // Extra content BLOCKQUOTE       
        if ($type == 'blockquote') {
            $block_extra = array('style_id' => null, 'shadow' => null, 'use_avatar' => null, 'avatar' => $request['existing_avatar'] ?? null);

            if ($inputs['use_avatar'] ?? null) {
                if ($request->hasFile('avatar')) {
                    $validator = Validator::make($request->all(), ['avatar' => 'file|image|max:5120']); // image mime, max 5 MB
                    if (!$validator->fails()) {
                        $image = Upload::storeImage($request->file('avatar'), $oldImageCode = $inputs["existing_avatar"] ?? null, $data = array('module' => $block_module, 'item_id' => null, 'extra_item_id' => null));
                        $block_extra['avatar'] = $image->code;
                    }
                }
            }
            if ($inputs['shadow'] ?? null) $block_extra['shadow'] = $inputs['shadow'];
            if ($inputs['use_avatar'] ?? null) $block_extra['use_avatar'] = $inputs['use_avatar'];
            if ($inputs['use_custom_style'] ?? null) $block_extra['style_id'] = $inputs['style_id'];
            $block->update(['extra' => serialize($block_extra)]);
        }


        // Extra content TESTIMONIAL        
        if ($type == 'testimonial') {
            $block_extra = array('style_id' => null, 'use_star_rating' => null, 'use_image' => null, 'cols' => null);
            if ($inputs['use_star_rating'] ?? null) $block_extra['use_star_rating'] = $inputs['use_star_rating'];
            if ($inputs['use_image'] ?? null) $block_extra['use_image'] = $inputs['use_image'];
            if ($inputs['use_custom_style'] ?? null) $block_extra['style_id'] = $inputs['style_id'];
            if ($inputs['cols'] ?? null) $block_extra['cols'] = $inputs['cols'] ?? 3;
            $block->update(['extra' => serialize($block_extra)]);
        }


        // Extra content LINKS        
        if ($type == 'links') {
            $block_extra = array('bg_color' => null, 'new_tab' => null, 'display_style' =>  $inputs['display_style']);
            if ($inputs['use_custom_bg'] ?? null) $block_extra['bg_color'] = $inputs['bg_color'];
            if ($inputs['new_tab'] ?? null) $block_extra['new_tab'] = $inputs['new_tab'];
            DB::table($table)->where('id', $id)->update(['extra' => serialize($block_extra)]);
        }




        // ***************************************************
        // Block CONTENT
        // ***************************************************      

        $langs = Language::get_languages();

        // UPDATE CONTENT
        foreach ($langs as $lang) {
            $content = null;

            // TEXT
            if ($type == 'text') {
                $content = array('title' => $request['title_' . $lang->id], 'subtitle' => $request['subtitle_' . $lang->id], 'content' => $request['content_' . $lang->id]);
                $content = serialize($content);
            }


            // EDITOR 
            if ($type == 'editor') {
                $content = $inputs['content_' . $lang->id];
            }


            // IMAGE
            if ($type == 'image') {
                $image = null;
                if ($request->hasFile('image_' . $lang->id)) {
                    $validator = Validator::make($request->all(), ['image_' . $lang->id => 'file|image|max:5120']); // image mime, max 5 MB
                    if (!$validator->fails())
                        $image = Upload::storeImage($request->file('image_' . $lang->id), $oldImageCode = $request['existing_image_' . $lang->id] ?? null, $data = array('module' => $block_module, 'item_id' => null, 'extra_item_id' => null));
                }
                $content = array('image' => $image->code ?? $request['existing_image_' . $lang->id] ?? null, 'title' => $request['title_' . $lang->id], 'caption' => $request['caption_' . $lang->id], 'url' => $request['url_' . $lang->id]);
                $content = serialize($content);

                // header data
                $header_array = array();
                $header_array = array('add_header' => $inputs['add_header_' . $lang->id] ?? null, 'title' =>  $inputs["header_title_$lang->id"] ?? null, 'content' =>  $inputs["header_content_$lang->id"] ?? null);
                $header_content = serialize($header_array);
            }


            // GALLERY                      
            if ($type == 'gallery') {
                $post_key_title = 'title_' . $lang->id;
                $post_key_image = 'image_' . $lang->id;
                $post_key_caption = 'caption_' . $lang->id;
                $post_key_position = 'position_' . $lang->id;
                $post_key_url = 'url_' . $lang->id;
                $post_key_existing_image = 'existing_image_' . $lang->id;
                $post_key_delete_image = 'delete_image_' . $lang->id;
                $images_array_key = array();

                //$counter_key = count(array_filter($_POST[$post_key_title]));
                $counter_key_images = count(array_filter($_FILES[$post_key_image]['name']));
                $counter_key_existing = count($inputs["$post_key_existing_image"] ?? array());
                $counter_key = $counter_key_images + $counter_key_existing;

                $image = null;

                for ($i = 0; $i < $counter_key; $i++) {
                    $image = null;

                    // delete image (if checkbox is checked)
                    if ($request->has($post_key_delete_image . '_' . $i)) {
                        $file_code_to_delete = $inputs['delete_image_file_code_' . $lang->id . '_' . $i];
                        delete_image($file_code_to_delete);
                    } elseif ($request->hasFile($post_key_image)) {

                        if ($file = $request->file($post_key_image)[$i] ?? null) {
                            $validator = Validator::make($request->all(), [$post_key_image . '.' . $i => 'file|image|max:2560']); // image mime, max 2.5 MB    
                            if (!$validator->fails()) {
                                $img = Upload::storeImage($file, $oldImageCode = $inputs["$post_key_existing_image"][$i] ?? null, $data = array('module' => $block_module, 'item_id' => null, 'extra_item_id' => null));
                                $image[$i] = $img->code;
                            }
                        }
                    }

                    if (!$request->has($post_key_delete_image . '_' . $i)) {
                        $images_array_key[$i] = array('title' => $inputs["$post_key_title"][$i], 'image' => $image[$i] ?? $inputs["$post_key_existing_image"][$i] ?? null, 'caption' => $inputs["$post_key_caption"][$i], 'position' => $inputs["$post_key_position"][$i] ?? 0, 'url' => $inputs["$post_key_url"][$i] ?? null);

                        // regenerate array and sort by position (asc)
                        if (count($images_array_key) > 1) {
                            $position = array_column($images_array_key, 'position');
                            array_multisort($position, SORT_ASC, $images_array_key);
                        }
                    }
                }

                $content = serialize($images_array_key);

                // header data
                $header_array = array();
                $header_array = array('add_header' => $inputs['add_header_' . $lang->id] ?? null, 'title' =>  $inputs["header_title_$lang->id"] ?? null, 'content' =>  $inputs["header_content_$lang->id"] ?? null);
                $header_content = serialize($header_array);
            }


            // VIDEO
            if ($type == 'video') {
                $content = array('embed' => $request['embed_' . $lang->id], 'caption' => $request['caption_' . $lang->id]);
                $content = serialize($content);

                // header data
                $header_array = array();
                $header_array = array('add_header' => $inputs['add_header_' . $lang->id] ?? null, 'title' =>  $inputs["header_title_$lang->id"] ?? null, 'content' =>  $inputs["header_content_$lang->id"] ?? null);
                $header_content = serialize($header_array);
            }


            // CARDS           
            if ($type == 'card') {
                $post_key_title = 'title_' . $lang->id;
                $post_key_url = 'url_' . $lang->id;
                $post_key_image = 'image_' . $lang->id;
                $post_key_content = 'content_' . $lang->id;
                $post_key_position = 'position_' . $lang->id;
                $post_key_icon = 'icon_' . $lang->id;
                $post_key_existing_image = 'existing_image_' . $lang->id;
                $post_key_delete_image = 'delete_image_' . $lang->id;
                $cards_array_key = array();
                $counter_key = count(array_filter($_POST[$post_key_title]));

                $image = null;

                for ($i = 0; $i < $counter_key; $i++) {
                    $image = null;

                    // delete image (if checkbox is checked)
                    if ($request->has($post_key_delete_image . '_' . $i)) {
                        $file_code_to_delete = $inputs['delete_image_file_code_' . $lang->id . '_' . $i];
                        delete_image($file_code_to_delete);
                        $inputs["$post_key_existing_image"][$i] = null;
                    }

                    if ($request->hasFile($post_key_image)) {

                        if ($file = $request->file($post_key_image)[$i] ?? null) {
                            $validator = Validator::make($request->all(), [$post_key_image . '.' . $i => 'file|image|max:2560']); // image mime, max 2.5 MB    
                            if (!$validator->fails()) {
                                $img = Upload::storeImage($file, $oldImageCode = $inputs["$post_key_existing_image"][$i] ?? null, $data = array('module' => $block_module, 'item_id' => null, 'extra_item_id' => null));
                                $image = $img->code;
                            }
                        }
                    }

                    $cards_array_key[$i] = array('title' => $inputs["$post_key_title"][$i], 'url' => $inputs["$post_key_url"][$i], 'icon' => $inputs["$post_key_icon"][$i], 'image' => $image ?? $inputs["$post_key_existing_image"][$i] ?? null, 'content' => $inputs["$post_key_content"][$i], 'position' => $inputs["$post_key_position"][$i] ?? 0);

                    // regenerate array and sort by position (asc)
                    if (count($cards_array_key) > 1) {
                        $position = array_column($cards_array_key, 'position');
                        array_multisort($position, SORT_ASC, $cards_array_key);
                    }
                }

                $content = serialize($cards_array_key);

                // header data
                $header_array = array();
                $header_array = array('add_header' => $inputs['add_header_' . $lang->id] ?? null, 'title' =>  $inputs["header_title_$lang->id"] ?? null, 'content' =>  $inputs["header_content_$lang->id"] ?? null);
                $header_content = serialize($header_array);
            }


            // HERO
            if ($type == 'hero') {
                $content = array('title' => $request['title_' . $lang->id], 'content' => $request['content_' . $lang->id], 'btn1_label' => $request['btn1_label_' . $lang->id], 'btn1_url' => $request['btn1_url_' . $lang->id], 'btn1_id' => $request['btn1_id_' . $lang->id], 'btn1_icon' => $request['btn1_icon_' . $lang->id], 'btn2_label' => $request['btn2_label_' . $lang->id], 'btn2_id' => $request['btn2_id_' . $lang->id], 'btn2_url' => $request['btn2_url_' . $lang->id], 'btn2_icon' => $request['btn2_icon_' . $lang->id]);
                $content = serialize($content);
            }


            // SLIDER
            if ($type == 'slider') {
                $post_key_title = 'title_' . $lang->id;
                $post_key_content = 'content_' . $lang->id;
                $post_key_image = 'image_' . $lang->id;
                $post_key_existing_image = 'existing_image_' . $lang->id;
                $post_key_url = 'url_' . $lang->id;
                $post_key_position = 'position_' . $lang->id;
                $post_key_delete_image = 'delete_image_' . $lang->id;
                $slides_array_key = array();
                $counter_key = count(array_filter($_POST[$post_key_title]));

                $image = null;

                for ($i = 0; $i < $counter_key; $i++) {

                    //if (!empty(array_filter($_POST[$post_key_title]))) { ...

                    $image = null;

                    // delete image (if checkbox is checked)
                    if ($request->has($post_key_delete_image . '_' . $i)) {
                        $file_code_to_delete = $inputs['delete_image_file_code_' . $lang->id . '_' . $i];
                        delete_image($file_code_to_delete);
                        $inputs["$post_key_existing_image"][$i] = null;
                    }

                    if ($request->hasFile($post_key_image)) {

                        if ($file = $request->file($post_key_image)[$i] ?? null) {
                            $validator = Validator::make($request->all(), [$post_key_image . '.' . $i => 'file|image|max:2560']); // image mime, max 2.5 MB    
                            if (!$validator->fails()) {
                                $img = Upload::storeImage($file, $oldImageCode = $inputs["$post_key_existing_image"][$i] ?? null, $data = array('module' => $block_module, 'item_id' => null, 'extra_item_id' => null));
                                $image = $img->code;
                            }
                        }
                    }

                    $slides_array_key[$i] = array('title' => $inputs["$post_key_title"][$i], 'content' => $inputs["$post_key_content"][$i], 'image' => $image ?? $inputs["$post_key_existing_image"][$i] ?? null, 'url' => $inputs["$post_key_url"][$i], 'position' => $inputs["$post_key_position"][$i] ?? 0);

                    // regenerate array and sort by position (asc)
                    if (count($slides_array_key) > 1) {
                        $position = array_column($slides_array_key, 'position');
                        array_multisort($position, SORT_ASC, $slides_array_key);
                    }
                }

                $content = serialize($slides_array_key);
            }


            // CUSTOM
            if ($type == 'custom') {
                $content = $request['content_' . $lang->id];
            }


            // ACCORDION
            if ($type == 'accordion') {
                $post_key_title = 'title_' . $lang->id;
                $post_key_content = 'content_' . $lang->id;
                $group_array_key = array();
                $counter_key = count(array_filter($_POST[$post_key_title]));

                for ($i = 0; $i < $counter_key; $i++) {
                    if (!(empty(array_filter($_POST[$post_key_title]))))
                        $group_array_key[$i] = array('title' => $inputs["$post_key_title"][$i], 'content' => $inputs["$post_key_content"][$i]);
                }
                $content = serialize($group_array_key);

                // header data
                $header_array = array();
                $header_array = array('add_header' => $inputs['add_header_' . $lang->id] ?? null, 'title' =>  $inputs["header_title_$lang->id"] ?? null, 'content' =>  $inputs["header_content_$lang->id"] ?? null);
                $header_content = serialize($header_array);
            }


            // ALERT
            if ($type == 'alert') {
                $post_key_title = 'title_' . $lang->id;
                $post_key_content = 'content_' . $lang->id;
                $content_array = array('title' => $inputs["$post_key_title"], 'content' => $inputs["$post_key_content"]);
                $content = serialize($content_array);
            }


            // MAP
            if ($type == 'map') {
                // Header data
                $header_array = array();
                $header_array = array('add_header' => $inputs['add_header_' . $lang->id] ?? null, 'title' =>  $inputs["header_title_$lang->id"] ?? null, 'content' =>  $inputs["header_content_$lang->id"] ?? null);
                $header_content = serialize($header_array);
            }


            // BLOCKQUOTE
            if ($type == 'blockquote') {
                $post_key_quote_source = 'quote_source_' . $lang->id;
                $post_key_content = 'content_' . $lang->id;
                $content_array = array('quote_source' => $inputs["$post_key_quote_source"], 'content' => $inputs["$post_key_content"]);
                $content = serialize($content_array);
            }


            // TESTIMONIAL           
            if ($type == 'testimonial') {
                $post_key_name = 'name_' . $lang->id;
                $post_key_subtitle = 'subtitle_' . $lang->id;
                $post_key_image = 'image_' . $lang->id;
                $post_key_rating = 'rating_' . $lang->id;
                $post_key_position = 'position_' . $lang->id;
                $post_key_testimonial = 'testimonial_' . $lang->id;
                $post_key_existing_image = 'existing_image_' . $lang->id;
                $post_key_delete_image = 'delete_image_' . $lang->id;
                $images_array_key = array();
                $counter_key = count(array_filter($_POST[$post_key_name]));

                $image = null;

                for ($i = 0; $i < $counter_key; $i++) {
                    $image = null;

                    // delete image (if checkbox is checked)
                    if ($request->has($post_key_delete_image . '_' . $i)) {
                        $file_code_to_delete = $inputs['delete_image_file_code_' . $lang->id . '_' . $i];
                        delete_image($file_code_to_delete);
                        $inputs["$post_key_existing_image"][$i] = null;
                    }

                    if ($request->hasFile($post_key_image)) {

                        if ($file = $request->file($post_key_image)[$i] ?? null) {
                            $validator = Validator::make($request->all(), [$post_key_image . '.' . $i => 'file|image|max:2560']); // image mime, max 2.5 MB    
                            if (!$validator->fails()) {
                                $img = Upload::storeImage($file, $oldImageCode = $inputs["$post_key_existing_image"][$i] ?? null, $data = array('module' => $block_module, 'item_id' => null, 'extra_item_id' => null));
                                $image = $img->code;
                            }
                        }
                    }

                    $images_array_key[$i] = array('name' => $inputs["$post_key_name"][$i], 'subtitle' => $inputs["$post_key_subtitle"][$i], 'image' => $image ?? $inputs["$post_key_existing_image"][$i] ?? null, 'rating' => $inputs["$post_key_rating"][$i], 'position' => $inputs["$post_key_position"][$i] ?? 0, 'testimonial' => $inputs["$post_key_testimonial"][$i] ?? null);

                    // regenerate array and sort by position (asc)
                    if (count($images_array_key) > 1) {
                        $position = array_column($images_array_key, 'position');
                        array_multisort($position, SORT_ASC, $images_array_key);
                    }
                }

                $content = serialize($images_array_key);

                // header data
                $header_array = array();
                $header_array = array('add_header' => $inputs['add_header_' . $lang->id] ?? null, 'title' =>  $inputs["header_title_$lang->id"] ?? null, 'content' =>  $inputs["header_content_$lang->id"] ?? null);
                $header_content = serialize($header_array);
            }


            // LINKS
            if ($type == 'links') {
                $post_key_title = 'a_title';
                $post_key_url = 'a_url';
                $post_key_icon = 'a_icon';
                $links_array_key = 'links_array';
                $links_array_key = array();
                $counter_key = 'numb_items';
                $counter_key = count(array_filter($_POST[$post_key_url]));

                for ($i = 0; $i < $counter_key; $i++) {
                    if (!(empty(array_filter($_POST[$post_key_title])) && empty(array_filter($_POST[$post_key_url]))))
                        $links_array_key[$i] = array('title' => $inputs["$post_key_title"][$i], 'url' => $inputs["$post_key_url"][$i], 'icon' => $inputs["$post_key_icon"][$i]);
                }
                $content = serialize($links_array_key);
                $block_content->updateOrInsert(['block_id' => $id], ['content' => $content]);

                // header data
                $header_array = array();
                $header_array = array('add_header' => $inputs['add_header'] ?? null, 'title' =>  $inputs["header_title"] ?? null, 'content' =>  $inputs["header_content"] ?? null);
                $header_content = serialize($header_array);
                $block_content->where(['block_id' => $id])->update(['header' => $header_content]);
            }




            if ($destination == 'blocks') {
                BlockContent::updateOrInsert(['block_id' => $id, 'lang_id' => $lang->id], ['content' => $content ?? null]);
                BlockContent::where(['block_id' => $id, 'lang_id' => $lang->id])->update(['header' => $header_content ?? null]);
            }
        }
    }
}
