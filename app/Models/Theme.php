<?php

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use File;

class Theme extends Model
{

    /**
     * Get configs from database
     *
     * @return null
     */
    public static function generate_styles_css()
    {
        // Create the directory if it does not exist
        $css_folder = 'assets/css/custom/';

        if (!File::isDirectory($css_folder)) {
            File::makeDirectory($css_folder, 0777, true, true);
        }

        $css_file = fopen($css_folder . '/styles.css', "w");

        $styles = ThemeStyle::get();
        $buttons = ThemeButton::get();
        $fonts_array = array();

        // 1. IMPORT FONTS
        foreach ($styles as $style) {
            $font_family = $style->font_family ?? config('defaults.font_family');
            $font_weights = $style->font_family_weights;
            $arr1 = explode(',', $font_family);
            $font_family_import = str_replace('\'', '', $arr1[0]);
            $font_family_import = str_replace(' ', '+', $font_family_import);
            $font_family_import =  $font_family_import . ":wght@" . $font_weights;

            //echo $font_family_import . "<br>";
            array_push($fonts_array, $font_family_import);

            $fonts_array = array_unique($fonts_array);

            $fonts_list = '';
            foreach ($fonts_array as $font_import) {
                $fonts_list = $fonts_list . '&family=' . $font_import;
            }

            if (substr($fonts_list, 0, 8) == '&family=') $fonts_list = substr($fonts_list, 8);
            $import_url = 'https://fonts.googleapis.com/css2?family=' . $fonts_list . '&display=swap';
        }

        if (count($styles) > 0) {
            $write_import = "@import url('" . $import_url . "');\n ";
            fwrite($css_file, $write_import);
        }

        foreach ($styles as $style) {
            // 2. FONTS AND COLORS
            $font_color = $style->text_color ?? config('nura.defaults.font_color');
            $text_font_weight = $style->text_font_weight ?? 'normal';
            $text_font_size = $style->text_size ?? '1em';
            $title_size = $style->title_size ?? '2.2em';
            $subtitle_size = $style->subtitle_size ?? '1.8em';
            $title_font_weight = $style->title_font_weight ?? 'normal';
            $subtitle_font_weight = $style->subtitle_font_weight ?? 'normal';
            $text_align = $style->text_align ?? 'left';
            $caption_color = $style->caption_color ?? 'grey';
            $caption_size = $style->caption_size ?? '0.95em';
            $caption_style = $style->caption_style ?? 'normal';

            $write = ".style_$style->id { color: $font_color !important; font-weight: $text_font_weight !important; font-size: $text_font_size !important; text-align: $text_align !important;  } ";
            $write .= ".style_$style->id .title {font-size: $title_size !important; font-weight: $title_font_weight !important; } ";
            $write .= ".style_$style->id .subtitle { font-size: $subtitle_size !important; font-weight: $subtitle_font_weight !important; } ";
            $write .= ".style_$style->id .caption { font-style: $caption_style; color: $caption_color !important; font-size: $caption_size !important; } ";
            fwrite($css_file, $write);

            if ($style->font_family) {
                $font_family = $style->font_family;
                $write = ".style_$style->id { font-family: $font_family!important; } ";
                fwrite($css_file, $write);
            }

            if ($style->bg_color) {
                $bg_color = $style->bg_color ?? config('nura.defaults.bg_color');
                $write = ".style_$style->id { background-color: $bg_color!important; } ";
                fwrite($css_file, $write);
            }

            // 3. LINKS            
            $link_color = $style->link_color ?? config('nura.defaults.link_color');
            $link_color_hover = $style->link_hover_color ?? config('nura.defaults.link_color_hover');
            $link_color_underline = $style->link_color_underline ?? config('nura.defaults.link_color_underline');
            $link_underline_offset = $style->link_underline_offset ?? 'auto';
            $link_underline_thickness = $style->link_underline_thickness ?? 'auto';
            $link_underline_color = $style->link_underline_color ?? config('nura.defaults.link_color_underline');
            $link_underline_color_hover = $style->link_underline_color_hover ?? config('nura.defaults.link_color_underline_hover');

            $link_decoration = $style->link_decoration ?? config('nura.defaults.link_decoration');
            $link_hover_decoration = $style->link_hover_decoration ?? config('nura.defaults.link_hover_decoration');
            $link_underline_offset = $style->link_underline_offset ?? config('nura.defaults.link_hover_decoration');

            $link_font_weight = $style->link_font_weight ?? 'normal';

            $write = ".style_$style->id a { color: $link_color; text-decoration: $link_decoration !important; -webkit-text-decoration-color: $link_color_underline !important; text-decoration-color: $link_underline_color !important; font-weight: $link_font_weight; text-decoration-thickness: $link_underline_thickness !important; 
                text-underline-offset: $link_underline_offset !important; } ";

            if ($style->link_decoration == 'double') $write .= ".style_$style->id a { text-decoration-line: underline; text-decoration-style: double; } ";
            if ($style->link_decoration == 'dashed') $write .= ".style_$style->id a { text-decoration-line: underline; text-decoration-style: dashed; } ";
            if ($style->link_decoration == 'dotted') $write .= ".style_$style->id a { text-decoration-line: underline; text-decoration-style: dotted; } ";
            if ($style->link_decoration == 'wavy') $write .= ".style_$style->id a { text-decoration-line: underline; text-decoration-style: wavy; } ";

            $write .= ".style_$style->id a:hover { color: $link_color_hover; 
                text-decoration: $link_hover_decoration !important; 
                -webkit-text-decoration-color: $link_color_underline !important; 
                text-decoration-color: $link_underline_color_hover !important;                
                text-decoration-thickness: $link_underline_thickness !important;
                text-underline-offset: $link_underline_offset !important; } ";

            if ($style->link_hover_decoration == 'double') $write .= ".style_$style->id a:hover { text-decoration-line: underline; text-decoration-style: double; } ";
            if ($style->link_hover_decoration == 'dashed') $write .= ".style_$style->id a:hover { text-decoration-line: underline; text-decoration-style: dashed; } ";
            if ($style->link_hover_decoration == 'dotted') $write .= ".style_$style->id a:hover { text-decoration-line: underline; text-decoration-style: dotted; } ";
            if ($style->link_hover_decoration == 'wavy') $write .= ".style_$style->id a:hover { text-decoration-line: underline; text-decoration-style: wavy; } ";

            // Do not overwrite Buttons style            
            $write .= ".style_$style->id .btn a { color: inherit !important; } ";

            fwrite($css_file, $write);
        }

        // BUTTONS
        foreach ($buttons as $button) {
            $bg_color = $button->bg_color ?? config('nura.defaults.button_bg_color');
            $font_color = $button->font_color ?? config('nura.defaults.button_font_color');
            $font_weight = $button->font_weight ?? 'normal';
            $rounded = $button->rounded ?? 0;
            $border_color = $button->border_color ?? config('nura.defaults.button_border_color');
            $bg_color_hover = $button->bg_color_hover ?? config('nura.defaults.button_bg_color_hover');
            $font_color_hover = $button->font_color_hover ?? config('nura.defaults.button_font_color_hover');
            $border_color_hover = $button->border_color_hover ?? config('nura.defaults.button_border_color_hover');

            $write = ".btn_$button->id, a .btn_$button->id {
                background-color: $bg_color !important; 
                color: $font_color !important;
                font-weight: $font_weight !important;
                text-decoration: none !important;
                border-radius: $rounded !important;
            } ";

            $write .= ".btn_$button->id:hover {
                background-color: $bg_color_hover  !important;
                color: $font_color_hover !important;
                font-weight: $font_weight  !important;
                text-decoration: none !important; } ";

            $write .= ".btn_$button->id a, a .btn_$button->id {
                color: $font_color  !important;       
                font-weight: $font_weight !important;         
                text-decoration: none !important; }";

            $write .= ".btn_$button->id a:hover, a:hover .btn_$button->id {
                color: $font_color_hover  !important;
                text-decoration: none !important; }";

            fwrite($css_file, $write);
        }


        // END. Close the file
        fclose($css_file);
        return;
    }


    public static function theme_font_sizes()
    {
        $array[0] = (object)array('name' => '75%', 'value' => '0.75rem');
        $array[1] = (object)array('name' => '80%', 'value' => '0.8rem');
        $array[2] = (object)array('name' => '85%', 'value' => '0.85rem');
        $array[3] = (object)array('name' => '90%', 'value' => '0.9rem');
        $array[4] = (object)array('name' => '95%', 'value' => '0.95rem');
        $array[5] = (object)array('name' => '100%', 'value' => '1rem'); // root value
        $array[6] = (object)array('name' => '105%', 'value' => '1.05rem');
        $array[7] = (object)array('name' => '110%', 'value' => '1.1rem');
        $array[8] = (object)array('name' => '120%', 'value' => '1.2rem');
        $array[9] = (object)array('name' => '130%', 'value' => '1.3rem');
        $array[10] = (object)array('name' => '140%', 'value' => '1.4rem');
        $array[11] = (object)array('name' => '150%', 'value' => '1.5rem');
        $array[12] = (object)array('name' => '160%', 'value' => '1.6rem');
        $array[13] = (object)array('name' => '175%', 'value' => '1.75rem');
        $array[14] = (object)array('name' => '200%', 'value' => '2rem');
        $array[15] = (object)array('name' => '225%', 'value' => '2.25rem');
        $array[16] = (object)array('name' => '250%', 'value' => '2.5rem');
        $array[17] = (object)array('name' => '275%', 'value' => '2.75rem');
        $array[18] = (object)array('name' => '300%', 'value' => '3rem');
        $array[19] = (object)array('name' => '350%', 'value' => '3.5rem');
        $array[20] = (object)array('name' => '400%', 'value' => '4rem');
        $array[21] = (object)array('name' => '450%', 'value' => '4.5rem');
        $array[22] = (object)array('name' => '500%', 'value' => '5rem');
        $array[23] = (object)array('name' => '600%', 'value' => '6rem');
        $array[24] = (object)array('name' => '800%', 'value' => '8rem');
        $array[25] = (object)array('name' => '1000%', 'value' => '10rem');

        return (object)$array;
    }


    public static function theme_fonts()
    {
        $array[25] = (object)array('value' => "'Open Sans', sans-serif", 'name' => 'Open Sans', 'weight' => '400;700', 'import' => 'Open+Sans:wght@400;700');
        $array[0] = (object)array('value' =>  "'Alegreya', serif", 'name' => 'Alegreya', 'weight' => '400;700', 'import' => 'Alegreya:wght@400;700');
        $array[1] = (object)array('value' =>  "'Alfa Slab One', cursive", 'name' => 'Alfa Slab One', 'weight' => '400', 'import' => 'Alfa+Slab+One:wght@400');
        $array[2] = (object)array('value' => "'Alegreya Sans', sans-serif", 'name' => 'Alegreya Sans', 'weight' => '400;700', 'import' => 'Alegreya+Sans:wght@400;700');
        $array[3] = (object)array('value' => "'Anton', sans-serif", 'name' => 'Anton', 'weight' => '400', 'import' => 'Anton:wght@400');
        $array[4] = (object)array('value' => "'Architects Daughter', cursive", 'name' => 'Architects Daughter', 'weight' => '400', 'import' => 'Architects+Daughter:wght@400');
        $array[5] = (object)array('value' => "'Archivo Black', sans-serif", 'name' => 'Archivo Black', 'weight' => '400', 'import' => 'Archivo+Black:wght@400');
        $array[6] = (object)array('value' => "'Arima Madurai', cursive", 'name' => 'Arima Madurai', 'weight' => '400;700', 'import' => 'Arima+Madurai:wght@400;700');
        $array[7] = (object)array('value' => "'Arvo', serif", 'name' => 'Arvo', 'weight' => '400;700', 'import' => 'Arvo:wght@400;700');
        $array[8] = (object)array('value' => "'Bitter', serif", 'name' => 'Bitter', 'weight' => '400;700', 'import' => 'Bitter:wght@400;700');
        $array[9] = (object)array('value' => "'Courgette', cursive", 'name' => 'Courgette', 'weight' => '400', 'import' => 'Courgette:wght@400');
        $array[10] = (object)array('value' => "'Courier Prime', monospace", 'name' => 'Courier Prime', 'weight' => '400;700', 'import' => 'Courier+Prime:wght@400;700');
        $array[11] = (object)array('value' => "'Crete Round', serif", 'name' => 'Crete Round', 'weight' => '400', 'import' => 'Crete+Round:wght@400');
        $array[12] = (object)array('value' => "'Dancing Script', cursive", 'name' => 'Dancing Script', 'weight' => '400;700', 'import' => 'Dancing+Script:wght@400;700');
        $array[13] = (object)array('value' => "'Exo', sans-serif", 'name' => 'Exo', 'weight' => '400;700', 'import' => 'Exo:wght@400;700');
        $array[14] = (object)array('value' => "'Fredoka', sans-serif", 'name' => 'Fredoka', 'weight' => '400;700', 'import' => 'Fredoka:wght@400;700');
        $array[15] = (object)array('value' => "'Inter', sans-serif", 'name' => 'Inter', 'weight' => '400;700', 'import' => 'Inter:wght@400;700');
        $array[16] = (object)array('value' => "'Krub', sans-serif", 'name' => 'Krub', 'weight' => '400;700', 'import' => 'Krub:wght@400;700');
        $array[17] = (object)array('value' => "'Lato', sans-serif", 'name' => 'Lato', 'weight' => '400;700', 'import' => 'Lato:wght@400;700');
        $array[18] = (object)array('value' => "'Libre Baskerville', serif", 'name' => 'Libre Baskerville', 'weight' => '400;700', 'import' => 'Libre+Baskerville:wght@400;700');
        $array[19] = (object)array('value' => "'Lora', serif", 'name' => 'Lora', 'weight' => '400;700', 'import' => 'Lora:wght@400;700');
        $array[20] = (object)array('value' => "'Merriweather', serif", 'name' => 'Merriweather', 'weight' => '400;700', 'import' => 'Merriweather:wght@400;700');
        $array[21] = (object)array('value' => "'Montserrat', sans-serif", 'name' => 'Montserrat', 'weight' => '400;700', 'import' => 'Montserrat:wght@400;700');
        $array[22] = (object)array('value' => "'Nanum Gothic', sans-serif", 'name' => 'Nanum Gothic', 'weight' => '400;700', 'import' => 'Nanum+Gothic:wght@400;700');
        $array[23] = (object)array('value' => "'Noto Sans', sans-serif", 'name' => 'Noto Sans', 'weight' => '400;700', 'import' => 'Noto+Sans:wght@400;700');
        $array[24] = (object)array('value' => "'Nunito', sans-serif", 'name' => 'Nunito', 'weight' => '400;700', 'import' => 'Nunito:wght@400;700');
        $array[25] = (object)array('value' => "'Open Sans', sans-serif", 'name' => 'Open Sans', 'weight' => '400;700', 'import' => 'Open+Sans:wght@400;700');
        $array[26] = (object)array('value' => "'Oswald', sans-serif", 'name' => 'Oswald', 'weight' => '400;700', 'import' => 'Oswald:wght@400;700');
        $array[27] = (object)array('value' => "'Pacifico', cursive", 'name' => 'Pacifico', 'weight' => '400', 'import' => 'Pacifico:wght@400');
        $array[28] = (object)array('value' => "'Playfair Display', serif", 'name' => 'Playfair Display', 'weight' => '400;700', 'import' => 'Playfair+Display:wght@400;700');
        $array[29] = (object)array('value' => "'Poppins', sans-serif", 'name' => 'Poppins', 'weight' => '400;700', 'import' => 'Poppins:wght@400;700');
        $array[30] = (object)array('value' => "'Prata', serif", 'name' => 'Prata', 'weight' => '400', 'import' => 'Prata:wght@400');
        $array[31] = (object)array('value' => "'Quicksand', sans-serif", 'name' => 'Quicksand', 'weight' => '400;700', 'import' => 'Quicksand:wght@400;700');
        $array[32] = (object)array('value' => "'Raleway', sans-serif", 'name' => 'Raleway', 'weight' => '400;700', 'import' => 'Raleway:wght@400;700');
        $array[33] = (object)array('value' => "'Roboto', sans-serif", 'name' => 'Roboto', 'weight' => '400;700', 'import' => 'Roboto:wght@400;700');
        $array[34] = (object)array('value' => "'Roboto Mono', monospace", 'name' => 'Roboto Mono', 'weight' => '400;700', 'import' => 'Roboto+Mono:wght@400;700');
        $array[35] = (object)array('value' => "'Roboto Slab', sans-serif", 'name' => 'Roboto Slab', 'weight' => '400;700', 'import' => 'Roboto+Slab:wght@400;700');
        $array[36] = (object)array('value' => "'Sen', sans-serif", 'name' => 'Sen', 'weight' => '400;700', 'import' => 'Sen:wght@400;700');
        $array[37] = (object)array('value' => "'Source Code Pro', monospace", 'name' => 'Source Code Pro', 'weight' => '400;700', 'import' => 'Source+Code+Pro:wght@400;700');
        $array[38] = (object)array('value' =>  "'Source Sans Pro', sans-serif", 'name' => 'Source Sans Pro', 'weight' => '400;700', 'import' => 'Source+Sans+Pro:wght@400;700');
        $array[39] = (object)array('value' =>  "'Source Serif Pro', sans-serif", 'name' => 'Source Serif Pro', 'weight' => '400;700', 'import' => 'Source+Serif+Pro:wght@400;700');
        $array[40] = (object)array('value' => "'Ubuntu', sans-serif", 'name' => 'Ubuntu', 'weight' => '400;700', 'import' => 'Ubuntu:wght@400;700');
        $array[41] = (object)array('value' => "'Urbanist', sans-serif", 'name' => 'Urbanist', 'weight' => '400;700', 'import' => 'Urbanist:wght@400;700');
        $array[42] = (object)array('value' => "'Work Sans', sans-serif", 'name' => 'Work Sans', 'weight' => '400;700', 'import' => 'Work+Sans:wght@400;700');

        return (object)$array;
    }
}
