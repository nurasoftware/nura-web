<?php

namespace App\Models;

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <contact@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;
use Illuminate\Database\Eloquent\Relations\HasMany;

class PostTag extends Model
{

    protected $fillable = [
        'tag',
        'slug',
        'lang_id',
        'counter',
    ];

    protected $table = 'post_tags';

    public $timestamps = false;

    public function post()
    {
        return $this->belongsTo(Post::class, 'post_id')->with('author')->where('status', 'published');
    }

    public function language()
    {
        return $this->belongsTo(Language::class, 'lang_id');
    }

    public function data(): HasMany
    {
        return $this->hasMany(PostTagItem::class, 'tag_id');
    }


    // Add tag id not exists. Return tag (if created) or null (if exists)
    public static function storeTag($tag, $lang_id, $post_id)
    {
        $slug = Str::slug($tag, '-');

        // Add tag in tags list (if not exists)
        if (PostTag::where('slug', $slug)->where('lang_id', $lang_id)->doesntExist()) {
            PostTag::create([
                'tag' => $tag,
                'slug' => $slug,
                'lang_id' => $lang_id,
            ]);
        }


        // Assign tag to post article
        $tag_id = PostTag::where('slug', $slug)->where('lang_id', $lang_id)->value('id');
        if (PostTagItem::where('tag_id', $tag_id)->where('post_id', $post_id)->where('lang_id', $lang_id)->doesntExist()) {
            PostTagItem::create([
                'tag_id' => $tag_id,
                'post_id' => $post_id,
                'lang_id' => $lang_id,
            ]);
        }

        return $tag ?? null;
    }


    public static function jsonTagsToString($jsonTags)
    {
        $tags_array = json_decode($jsonTags, true);
        foreach ($tags_array as $tag_array)
            $implode[] = implode(', ', $tag_array);
        $tags_string = implode(",", $implode);

        return $tags_string ?? null;
    }
}
