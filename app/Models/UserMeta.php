<?php

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class UserMeta extends Model
{
    use HasFactory;

    protected $table = 'user_meta'; // Specifies the name of the table

    protected $fillable = ['user_id', 'name', 'value'];

    public $timestamps = false; // Indicates that the model does not have timestamp fields

    // Defines the relationship between UserMeta and User models
    public function user()
    {
        return $this->belongsTo(User::class, 'user_id', 'id');
    }

    /**
     * Defines a one-to-many relationship between the User model and the UserMeta model.
     * A user can have multiple metadata, this function facilitates the retrieval of that metadata.
     *
     * @return \Illuminate\Database\Eloquent\Relations\HasMany
     */
    public function metaData()
    {
        return $this->hasMany(UserMeta::class, 'user_id', 'id');
    }


    /**
     * Accessor to retrieve all user metadata as a key-value array where the key is 'name' and the value is 'value'.
     *
     * @return array
     */
    public function get_meta_attribute()
    {
        return $this->metaData()->get()->pluck('value', 'name')->toArray();
    }


    // Method to get a specific piece of user metadata
    public static function get_meta($user_id, $name)
    {
        $value = UserMeta::where('name', $name)->where('user_id', $user_id)->value('value');

        return $value;
    }


    // Method to add user metadata
    public static function add_meta($user_id, $name, $value)
    {
        UserMeta::updateOrInsert(
            ['name' => $name, 'user_id' => $user_id],
            ['value' => $value]
        );
    }
}
