<?php

/*
 * NuraWeb - Free and Open Source Website Builder
 *
 * Copyright (C) 2024  Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 *
 * LICENSE:
 * NuraWeb is licensed under the GNU General Public License v3.0
 * Permissions of this strong copyleft license are conditioned on making available complete source code 
 * of licensed works and modifications, which include larger works using a licensed work, under the same license. 
 * Copyright and license notices must be preserved. Contributors provide an express grant of patent rights.
 *    
 * @copyright   Copyright (c) 2024, Chimilevschi Iosif Gabriel, https://nurasoftware.com.
 * @license     https://opensource.org/licenses/GPL-3.0  GPL-3.0 License.
 * @author      Chimilevschi Iosif Gabriel <office@nurasoftware.com>
 * 
 * 
 * IMPORTANT: DO NOT edit this file manually. All changes will be lost after software update.
 */

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class ThemeConfig extends Model
{
    protected $fillable = [
        'theme',
        'style',
        'name',
        'value',
    ];

    protected $table = 'theme_config';

    /**
     * Indicates if the model should be timestamped.
     *
     * @var bool
     */
    public $timestamps = false;


    /**
     * Get configs from database
     *
     * @return object
     */
    public static function config($theme = null)
    {
        /*
        $results = Cache::remember('config', 60 * 60 * 24, function () {
            return Config::pluck('value', 'name')->toArray();
        });
        */

        if(! $theme ?? null) $selected_theme = Config::config()->active_theme ?? null;
        else  $selected_theme = $theme;
        $results = ThemeConfig::where('theme', $selected_theme)->pluck('value', 'name')->toArray();

        return (object) $results;
    }


    public static function generate_global_css($theme = null)
    {
        // 1. Add all variables in database first
        $styles = ThemeConfig::where('theme', $theme)->groupBy('style')->get();

        $css_destination = 'assets/css/custom/custom.css';

        $fonts_array = array();

        $css_file = fopen($css_destination, "w");

        $write = "";

        foreach ($styles as $style) {
            $items = ThemeConfig::where('theme', $theme)->where('style', $style->style)->pluck('value', 'name')->toArray();
            $items = (object)$items;

            //dd($items);

            // Font Family
            if ($items->font_family ?? null) {
                $font_family = $items->font_family; // Example: Alegreya+Sans:wght@400;700|'Alegreya Sans', sans-serif
                $font_family_array = explode('|', $font_family);
                $font_family_import = $font_family_array[0]; // Alegreya+Sans:wght@400;700
                $font_family_css = $font_family_array[1]; // 'Alegreya Sans', sans-serif            
            }

            // Global
            if ($style->style == 'global') {
                $write = ".style_global { background-color: $items->bg_color; color: $items->text_color; font-family: $font_family_css; font-size: $items->text_size; } ";
                fwrite($css_file, $write);

                $write = ".style_global a { color: $items->link_color; text-decoration: $items->link_decoration; font-weight: $items->font_weight; text-decoration-thickness: $items->link_underline_thickness !important; 
                    text-underline-offset: $items->link_underline_offset !important; } ";
                fwrite($css_file, $write);

                $write = ".style_global a:hover { color: $items->link_hover_color; text-decoration: $items->link_hover_decoration; } ";
                fwrite($css_file, $write);

                $write = ".style_global a:focus { color: $items->link_hover_color; text-decoration: $items->link_decoration!important; } ";
                fwrite($css_file, $write);

                // add font family to array
                if ($items->font_family ?? null) array_push($fonts_array, $font_family_import);
            }


            // Navigation
            if ($style->style == 'nav') {
                $nav_height = $items->navbar_height ?? '75px';
                $write = ".style_nav { background-color: $items->bg_color; font-family: $font_family_css; font-size: $items->text_size; height: $nav_height; } ";
                fwrite($css_file, $write);

                $write = ".style_nav a { color: $items->link_color; text-decoration: $items->link_decoration; font-weight: $items->font_weight; text-decoration-thickness: $items->link_underline_thickness !important; 
                    text-underline-offset: $items->link_underline_offset !important; } ";
                fwrite($css_file, $write);

                $write = ".style_nav a:hover { color: $items->link_hover_color; text-decoration: $items->link_hover_decoration; font-weight: $items->font_weight; text-decoration-thickness: $items->link_underline_thickness !important; 
                    text-underline-offset: $items->link_underline_offset !important; } ";
                fwrite($css_file, $write);

                $write = ".style_nav a:focus { color: $items->link_hover_color !important; text-decoration: $items->link_decoration!important; } ";
                fwrite($css_file, $write);

                // add font family to array
                if ($items->font_family ?? null) array_push($fonts_array, $font_family_import);
            }


            // Navigation Dropdown Menu
            if ($style->style == 'nav_dropdown') {

                $navbar_height = ThemeConfig::get_theme_config($theme = 'builder', 'navbar_height') ?? '75px';
                if ($navbar_height == '75px') $dropdown_margin_top = '16px';
                elseif ($navbar_height == '50px') $dropdown_margin_top = '4px';
                elseif ($navbar_height == '100px') $dropdown_margin_top = '29px';
                else $dropdown_margin_top = '10px';

                $write = ".style_nav_dropdown { background-color: $items->bg_color; font-size: $items->text_size; margin-top: $dropdown_margin_top !important; } ";
                fwrite($css_file, $write);

                $write = ".style_nav_dropdown a { color: $items->link_color; text-decoration: $items->link_decoration; font-weight: $items->font_weight; text-decoration-thickness: $items->link_underline_thickness !important; 
                    text-underline-offset: $items->link_underline_offset !important; } ";
                fwrite($css_file, $write);

                $write = ".style_nav_dropdown li:hover { background-color: $items->bg_color_hover; } ";
                fwrite($css_file, $write);

                $write = ".style_nav_dropdown a:hover { color: $items->link_hover_color!important; text-decoration: $items->link_hover_decoration; } ";
                fwrite($css_file, $write);

                $write = ".style_nav_dropdown a:focus { color: $items->link_hover_color!important; text-decoration: $items->link_decoration!important; } ";
                fwrite($css_file, $write);

                // add font family to array
                if ($items->font_family ?? null) array_push($fonts_array, $font_family_import);
            }


            // Footer
            if ($style->style == 'footer') {
                $write = ".style_footer { background-color: $items->bg_color; color: $items->text_color; font-family: $font_family_css; font-size: $items->text_size; text-align: $items->text_align; font-weight: $items->text_weight; } ";
                fwrite($css_file, $write);

                $write = ".style_footer a { color: $items->link_color; text-decoration: $items->link_decoration; font-weight: $items->link_weight; text-decoration-thickness: $items->link_underline_thickness !important; 
                    text-underline-offset: $items->link_underline_offset !important; } ";
                fwrite($css_file, $write);

                $write = ".style_footer a:hover { color: $items->link_hover_color!important; text-decoration: $items->link_hover_decoration; } ";
                fwrite($css_file, $write);

                $write = ".style_footer a:focus { color: $items->link_hover_color!important; text-decoration: $items->link_decoration!important; } ";
                fwrite($css_file, $write);

                $write = ".style_footer .title { font-size: $items->title_size; font-weight: $items->title_weight; } ";
                fwrite($css_file, $write);

                // add font family to array
                if ($items->font_family ?? null) array_push($fonts_array, $font_family_import);
            }


            // Secondary Footer
            if ($style->style == 'footer2') {
                $write = ".style_footer2 { background-color: $items->bg_color; color: $items->text_color; font-family: $font_family_css; font-size: $items->text_size; text-align: $items->text_align; font-weight: $items->text_weight; } ";
                fwrite($css_file, $write);

                $write = ".style_footer2 a { color: $items->link_color; text-decoration: $items->link_decoration; font-weight: $items->link_weight; text-decoration-thickness: $items->link_underline_thickness !important; 
                    text-underline-offset: $items->link_underline_offset !important; } ";
                fwrite($css_file, $write);

                $write = ".style_footer2 a:hover { color: $items->link_hover_color!important; text-decoration: $items->link_hover_decoration; } ";
                fwrite($css_file, $write);

                $write = ".style_footer2 a:focus { color: $items->link_hover_color!important; text-decoration: $items->link_decoration!important; } ";
                fwrite($css_file, $write);

                $write = ".style_footer2 .title { font-size: $items->title_size; font-weight: $items->title_weight; } ";
                fwrite($css_file, $write);

                // add font family to array
                if ($items->font_family ?? null) array_push($fonts_array, $font_family_import);
            }
        }


        // Import fonts family
        $fonts_array = array_unique($fonts_array);
        $fonts_list = '';
        foreach ($fonts_array as $font_import) {
            $fonts_list = $fonts_list . '&family=' . $font_import;
        }

        if (substr($fonts_list, 0, 8) == '&family=') $fonts_list = substr($fonts_list, 8);
        $import_url = 'https://fonts.googleapis.com/css2?family=' . $fonts_list . '&display=swap';

        $write_import = "@import url('" . $import_url . "');\n ";
        //fwrite($css_file, $write_import);

        // IMPORTANT: Write font import at the begining oif the file:
        $file_data = $write_import . "\n";
        $file_data .= file_get_contents($css_destination);
        file_put_contents($css_destination, $file_data);



        // END. Close the file
        fclose($css_file);

        return;
    }



    public static function get_theme_config($theme, $name)
    {
        return ThemeConfig::where('theme', $theme)->where('name', $name)->value('value') ?? null;
    }
}
